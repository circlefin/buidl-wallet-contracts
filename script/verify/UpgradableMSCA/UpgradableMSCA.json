{"language":"Solidity","sources":{"src/msca/6900/v0.7/account/UpgradableMSCA.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {ExecutionUtils} from \"../../../../utils/ExecutionUtils.sol\";\nimport {InvalidInitializationInput} from \"../../shared/common/Errors.sol\";\nimport {FunctionReference} from \"../common/Structs.sol\";\nimport {PluginManager} from \"../managers/PluginManager.sol\";\nimport {BaseMSCA} from \"./BaseMSCA.sol\";\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\n/**\n * @dev Leverage {ERC1967Proxy} brought by UUPS proxies, when this contract is set as the implementation behind such a\n * proxy.\n * The {_authorizeUpgrade} function is overridden here so more granular ACLs to the upgrade mechanism should be enforced\n * by plugins.\n */\ncontract UpgradableMSCA is BaseMSCA, UUPSUpgradeable {\n    using ExecutionUtils for address;\n\n    event UpgradableMSCAInitialized(address indexed account, address indexed entryPointAddress);\n\n    constructor(IEntryPoint _newEntryPoint, PluginManager _newPluginManager)\n        BaseMSCA(_newEntryPoint, _newPluginManager)\n    {\n        // lock the implementation contract so it can only be called from proxies\n        _disableWalletStorageInitializers();\n    }\n\n    /// @notice Initializes the account with a set of plugins\n    /// @dev No dependencies can be injected with this installation. For a full installation, please use installPlugin.\n    /// @param plugins The plugins to install\n    /// @param manifestHashes The manifest hashes of the plugins to install\n    /// @param pluginInstallData The plugin init data of the plugins to install, please pass in empty bytes if you don't\n    /// need to init\n    function initializeUpgradableMSCA(\n        address[] memory plugins,\n        bytes32[] memory manifestHashes,\n        bytes[] memory pluginInstallData\n    ) external walletStorageInitializer {\n        uint256 length = plugins.length;\n        if (length != manifestHashes.length || length != pluginInstallData.length) {\n            revert InvalidInitializationInput();\n        }\n        FunctionReference[] memory dependencies = new FunctionReference[](0);\n        for (uint256 i = 0; i < length; ++i) {\n            // call install directly to bypass validateNativeFunction modifier\n            bytes memory data = abi.encodeCall(\n                PluginManager.install,\n                (plugins[i], manifestHashes[i], pluginInstallData[i], dependencies, address(this))\n            );\n            address(pluginManager).delegateCall(data);\n            emit PluginInstalled(plugins[i], manifestHashes[i], dependencies);\n        }\n        emit UpgradableMSCAInitialized(address(this), address(entryPoint));\n    }\n\n    /// @inheritdoc UUPSUpgradeable\n    function upgradeToAndCall(address newImplementation, bytes memory data)\n        public\n        payable\n        override\n        onlyProxy\n        validateNativeFunction\n    {\n        super.upgradeToAndCall(newImplementation, data);\n    }\n\n    /**\n     * @dev The function is overridden here so more granular ACLs to the upgrade mechanism should be enforced by\n     * plugins.\n     */\n    function _authorizeUpgrade(address newImplementation) internal override {}\n}\n"},"src/utils/ExecutionUtils.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\n// solhint-disable no-inline-assembly\n\n/**\n * Utility functions helpful when making different kinds of contract calls in Solidity.\n * For inline assembly, please refer to https://docs.soliditylang.org/en/latest/assembly.html\n * For opcodes, please refer to https://ethereum.org/en/developers/docs/evm/opcodes/ and https://www.evm.codes/\n */\nlibrary ExecutionUtils {\n    function call(address to, uint256 value, bytes memory data)\n        internal\n        returns (bool success, bytes memory returnData)\n    {\n        assembly {\n            success := call(gas(), to, value, add(data, 0x20), mload(data), 0, 0)\n            let len := returndatasize()\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, add(len, 0x20)))\n            mstore(ptr, len)\n            returndatacopy(add(ptr, 0x20), 0, len)\n            returnData := ptr\n        }\n    }\n\n    function revertWithData(bytes memory returnData) internal pure {\n        assembly {\n            revert(add(returnData, 32), mload(returnData))\n        }\n    }\n\n    function callAndRevert(address to, uint256 value, bytes memory data) internal {\n        (bool success, bytes memory returnData) = call(to, value, data);\n        if (!success) {\n            revertWithData(returnData);\n        }\n    }\n\n    function callWithReturnDataOrRevert(address to, uint256 value, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returnData) = call(to, value, data);\n        if (!success) {\n            // bubble up revert reason\n            revertWithData(returnData);\n        }\n        return returnData;\n    }\n\n    /// @dev Return data or revert.\n    function delegateCall(address to, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returnData) = to.delegatecall(data);\n        if (!success) {\n            // bubble up revert reason\n            revertWithData(returnData);\n        }\n        return returnData;\n    }\n}\n"},"src/msca/6900/shared/common/Errors.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\n/**\n * @notice Throws when the caller is unexpected.\n */\nerror UnauthorizedCaller();\n\n/**\n * @notice Throws when the selector is not found.\n */\nerror NotFoundSelector();\n\n/**\n * @notice Throws when authorizer is invalid.\n */\nerror InvalidAuthorizer();\n\nerror InvalidValidationFunctionId(uint8 functionId);\n\nerror InvalidFunctionReference();\n\nerror ItemAlreadyExists();\n\nerror ItemDoesNotExist();\n\nerror InvalidLimit();\n\nerror InvalidExecutionFunction(bytes4 selector);\n\nerror InvalidInitializationInput();\n\nerror Create2FailedDeployment();\n\nerror InvalidLength();\n\nerror Unsupported();\n\nerror NotImplemented(bytes4 selector, uint8 functionId);\n\nerror InvalidItem();\n\n// v2 NotImplemented\nerror NotImplementedFunction(bytes4 selector, uint32 entityId);\n"},"src/msca/6900/v0.7/common/Structs.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\n// Standard executor\nstruct Call {\n    // The target address for the account to call.\n    address target;\n    // The value to send with the call.\n    uint256 value;\n    // The calldata for the call.\n    bytes data;\n}\n\nstruct FunctionReference {\n    address plugin;\n    uint8 functionId;\n}\n\n// Account loupe\n// @notice Config for an execution function, given a selector\nstruct ExecutionFunctionConfig {\n    address plugin;\n    FunctionReference userOpValidationFunction;\n    FunctionReference runtimeValidationFunction;\n}\n\n/// @notice Pre and post hooks for a given selector\n/// @dev It's possible for one of either `preExecHook` or `postExecHook` to be empty\nstruct ExecutionHooks {\n    FunctionReference preExecHook;\n    FunctionReference postExecHook;\n}\n\n// internal data structure\nstruct Bytes21DLL {\n    mapping(bytes21 => bytes21) next;\n    mapping(bytes21 => bytes21) prev;\n    uint256 count;\n}\n\nstruct RepeatableBytes21DLL {\n    mapping(bytes21 => bytes21) next;\n    mapping(bytes21 => bytes21) prev;\n    mapping(bytes21 => uint256) counter;\n    // unique items\n    uint256 uniqueItems;\n    // total items with repeatable ones\n    uint256 totalItems;\n}\n\n// Represents a set of pre and post hooks. Used to store execution hooks.\nstruct HookGroup {\n    RepeatableBytes21DLL preHooks;\n    // key = preExecHook.pack()\n    mapping(bytes21 => RepeatableBytes21DLL) preToPostHooks;\n    RepeatableBytes21DLL postOnlyHooks;\n}\n\n// plugin's permission to call external (to the account and its plugins) contracts and addresses\n// through `executeFromPluginExternal`\nstruct PermittedExternalCall {\n    bool addressPermitted;\n    // either anySelector or selectors permitted\n    bool anySelector;\n    mapping(bytes4 => bool) selectors;\n}\n\nstruct PostExecHookToRun {\n    bytes preExecHookReturnData;\n    FunctionReference postExecHook;\n}\n\n// plugin detail stored in wallet storage\nstruct PluginDetail {\n    // permitted to call any external contracts and selectors\n    bool anyExternalAddressPermitted;\n    // boolean to indicate if the plugin can spend native tokens, if any of the execution function can spend\n    // native tokens, a plugin is considered to be able to spend native tokens of the accounts\n    bool canSpendNativeToken;\n    // tracks the count this plugin has been used as a dependency function\n    uint256 dependentCounter;\n    bytes32 manifestHash;\n    Bytes21DLL dependencies;\n}\n\n// execution detail associated with selector\nstruct ExecutionDetail {\n    address plugin; // plugin address that implements the execution function, for native functions, the value should be\n        // address(0)\n    FunctionReference userOpValidationFunction;\n    RepeatableBytes21DLL preUserOpValidationHooks;\n    FunctionReference runtimeValidationFunction;\n    RepeatableBytes21DLL preRuntimeValidationHooks;\n    HookGroup executionHooks;\n}\n"},"src/msca/6900/v0.7/managers/PluginManager.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {EMPTY_FUNCTION_REFERENCE} from \"../../../../common/Constants.sol\";\nimport {InvalidFunctionReference} from \"../../shared/common/Errors.sol\";\nimport {AddressDLL} from \"../../shared/common/Structs.sol\";\nimport {AddressDLLLib} from \"../../shared/libs/AddressDLLLib.sol\";\nimport {\n    PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE,\n    RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE\n} from \"../common/Constants.sol\";\nimport \"../common/PluginManifest.sol\";\nimport \"../common/Structs.sol\";\nimport {IPlugin} from \"../interfaces/IPlugin.sol\";\nimport {FunctionReferenceDLLLib} from \"../libs/FunctionReferenceDLLLib.sol\";\nimport {FunctionReferenceLib} from \"../libs/FunctionReferenceLib.sol\";\nimport {RepeatableFunctionReferenceDLLLib} from \"../libs/RepeatableFunctionReferenceDLLLib.sol\";\nimport {SelectorRegistryLib} from \"../libs/SelectorRegistryLib.sol\";\nimport {WalletStorageV1Lib} from \"../libs/WalletStorageV1Lib.sol\";\nimport {ERC165Checker} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\n/**\n * @dev Default implementation of https://eips.ethereum.org/EIPS/eip-6900. MSCAs must implement this interface to\n * support installing and uninstalling plugins.\n */\ncontract PluginManager {\n    using AddressDLLLib for AddressDLL;\n    using FunctionReferenceDLLLib for Bytes21DLL;\n    using RepeatableFunctionReferenceDLLLib for RepeatableBytes21DLL;\n    using FunctionReferenceLib for FunctionReference;\n    using FunctionReferenceLib for bytes21;\n    using SelectorRegistryLib for bytes4;\n\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    enum AssociatedFunctionType {\n        HOOK,\n        VALIDATION_FUNCTION\n    }\n\n    error PluginNotImplementInterface();\n    error InvalidPluginManifest();\n    error InvalidPluginManifestHash();\n    error InvalidPluginDependency(address plugin);\n    error PluginUsedByOthers(address plugin);\n    error ExecutionDetailAlreadySet(address plugin, bytes4 selector);\n    error ExecuteFromPluginExternalAlreadySet(address plugin, address externalAddress);\n    error ExecuteFromPluginExternalAlreadyUnset(address plugin, address externalAddress);\n    error ValidationFunctionAlreadySet(bytes4 selector);\n    error FailToCallOnInstall(address plugin, bytes revertReason);\n    error OnlyDelegated();\n    error HookDependencyNotPermitted();\n    error InvalidExecutionSelector(address plugin, bytes4 selector);\n\n    modifier onlyDelegated() {\n        if (address(this) == __self) {\n            revert OnlyDelegated();\n        }\n        _;\n    }\n\n    /// @dev Refer to IPluginManager\n    function install(\n        address plugin,\n        bytes32 manifestHash,\n        bytes memory pluginInstallData,\n        FunctionReference[] memory dependencies,\n        address msca\n    ) external onlyDelegated {\n        // revert if the plugin does not implement ERC-165 or does not support the IPlugin interface\n        if (!ERC165Checker.supportsInterface(plugin, type(IPlugin).interfaceId)) {\n            revert PluginNotImplementInterface();\n        }\n        WalletStorageV1Lib.Layout storage storageLayout = WalletStorageV1Lib.getLayout();\n        // revert internally if the plugin has already been installed on the modular account\n        storageLayout.installedPlugins.append(plugin);\n        IPlugin pluginToInstall = IPlugin(plugin);\n        // revert if manifestHash does not match the computed Keccak-256 hash of the plugin’s returned manifest\n        PluginManifest memory pluginManifest = pluginToInstall.pluginManifest();\n        if (manifestHash != keccak256(abi.encode(pluginManifest))) {\n            revert InvalidPluginManifestHash();\n        }\n        // store the plugin manifest hash\n        storageLayout.pluginDetails[plugin].manifestHash = manifestHash;\n        uint256 length = pluginManifest.interfaceIds.length;\n        for (uint256 i = 0; i < length; ++i) {\n            storageLayout.supportedInterfaces[pluginManifest.interfaceIds[i]] += 1;\n        }\n        // revert if any address in dependencies does not support the interface at its matching index in the manifest’s\n        // dependencyInterfaceIds,\n        // or if the two array lengths do not match,\n        // or if any of the dependencies are not already installed on the modular account\n        length = dependencies.length;\n        if (length != pluginManifest.dependencyInterfaceIds.length) {\n            revert InvalidPluginDependency(plugin);\n        }\n        for (uint256 i = 0; i < length; ++i) {\n            address dependencyPluginAddr = dependencies[i].plugin;\n            // if dependencyPluginAddr is msca address, then we don't actually introduce any new plugin dependency\n            // other than native dependency, so we do not need to perform any plugin dependency related logic\n            if (dependencyPluginAddr == msca) {\n                continue;\n            }\n            if (!ERC165Checker.supportsInterface(dependencyPluginAddr, pluginManifest.dependencyInterfaceIds[i])) {\n                revert InvalidPluginDependency(dependencyPluginAddr);\n            }\n            // the dependency plugin needs to be installed first\n            if (!storageLayout.installedPlugins.contains(dependencyPluginAddr)) {\n                revert InvalidPluginDependency(dependencyPluginAddr);\n            }\n            // each dependency’s record MUST also be updated to reflect that it has a new dependent\n            // record the plugin dependency, will revert if it's already installed\n            storageLayout.pluginDetails[plugin].dependencies.append(dependencies[i]);\n            // increment the dependency's dependentCounter since the current plugin is dependent on dependencyPlugin\n            storageLayout.pluginDetails[dependencyPluginAddr].dependentCounter += 1;\n        }\n\n        // record if this plugin is allowed to spend native token\n        if (pluginManifest.canSpendNativeToken) {\n            storageLayout.pluginDetails[plugin].canSpendNativeToken = true;\n        }\n\n        // record execution details\n        //////////////////////////////////////////////\n        // install execution functions and hooks\n        //////////////////////////////////////////////\n        length = pluginManifest.executionFunctions.length;\n        for (uint256 i = 0; i < length; ++i) {\n            bytes4 selector = pluginManifest.executionFunctions[i];\n            if (storageLayout.executionDetails[selector].plugin != address(0)) {\n                revert ExecutionDetailAlreadySet(plugin, selector);\n            }\n            if (\n                selector._isNativeFunctionSelector() || selector._isErc4337FunctionSelector()\n                    || selector._isIPluginFunctionSelector()\n            ) {\n                revert InvalidExecutionSelector(plugin, selector);\n            }\n            storageLayout.executionDetails[selector].plugin = plugin;\n        }\n\n        // install pre and post execution hooks\n        length = pluginManifest.executionHooks.length;\n        for (uint256 i = 0; i < length; ++i) {\n            bytes4 selector = pluginManifest.executionHooks[i].selector;\n            FunctionReference memory preExecHook = _resolveManifestFunction(\n                pluginManifest.executionHooks[i].preExecHook,\n                plugin,\n                dependencies,\n                ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                AssociatedFunctionType.HOOK\n            );\n            FunctionReference memory postExecHook = _resolveManifestFunction(\n                pluginManifest.executionHooks[i].postExecHook,\n                plugin,\n                dependencies,\n                ManifestAssociatedFunctionType.NONE,\n                AssociatedFunctionType.HOOK\n            );\n            _addHookGroup(storageLayout.executionDetails[selector].executionHooks, preExecHook, postExecHook);\n        }\n\n        //////////////////////////////////////////////\n        // install validation functions and hooks\n        //////////////////////////////////////////////\n        // install userOpValidationFunctions\n        length = pluginManifest.userOpValidationFunctions.length;\n        for (uint256 i = 0; i < length; ++i) {\n            bytes4 selector = pluginManifest.userOpValidationFunctions[i].executionSelector;\n            if (storageLayout.executionDetails[selector].userOpValidationFunction.pack() != EMPTY_FUNCTION_REFERENCE) {\n                revert ValidationFunctionAlreadySet(selector);\n            }\n            storageLayout.executionDetails[selector].userOpValidationFunction = _resolveManifestFunction(\n                pluginManifest.userOpValidationFunctions[i].associatedFunction,\n                plugin,\n                dependencies,\n                ManifestAssociatedFunctionType.NONE,\n                AssociatedFunctionType.VALIDATION_FUNCTION\n            );\n        }\n        // install runtimeValidationFunctions\n        length = pluginManifest.runtimeValidationFunctions.length;\n        for (uint256 i = 0; i < length; ++i) {\n            bytes4 selector = pluginManifest.runtimeValidationFunctions[i].executionSelector;\n            if (storageLayout.executionDetails[selector].runtimeValidationFunction.pack() != EMPTY_FUNCTION_REFERENCE) {\n                revert ValidationFunctionAlreadySet(selector);\n            }\n            storageLayout.executionDetails[selector].runtimeValidationFunction = _resolveManifestFunction(\n                pluginManifest.runtimeValidationFunctions[i].associatedFunction,\n                plugin,\n                dependencies,\n                ManifestAssociatedFunctionType.RUNTIME_VALIDATION_ALWAYS_ALLOW, // risk burning gas from the account\n                AssociatedFunctionType.VALIDATION_FUNCTION\n            );\n        }\n        // install preUserOpValidationHooks\n        length = pluginManifest.preUserOpValidationHooks.length;\n        // force override to be safe\n        FunctionReference[] memory emptyDependencies = new FunctionReference[](0);\n        for (uint256 i = 0; i < length; ++i) {\n            bytes4 selector = pluginManifest.preUserOpValidationHooks[i].executionSelector;\n            // revert internally\n            storageLayout.executionDetails[selector].preUserOpValidationHooks.append(\n                _resolveManifestFunction(\n                    pluginManifest.preUserOpValidationHooks[i].associatedFunction,\n                    plugin,\n                    emptyDependencies,\n                    ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                    AssociatedFunctionType.HOOK\n                )\n            );\n        }\n        // install preRuntimeValidationHooks\n        length = pluginManifest.preRuntimeValidationHooks.length;\n        for (uint256 i = 0; i < length; ++i) {\n            // revert internally\n            storageLayout.executionDetails[pluginManifest.preRuntimeValidationHooks[i].executionSelector]\n                .preRuntimeValidationHooks\n                .append(\n                _resolveManifestFunction(\n                    pluginManifest.preRuntimeValidationHooks[i].associatedFunction,\n                    plugin,\n                    emptyDependencies,\n                    ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                    AssociatedFunctionType.HOOK\n                )\n            );\n        }\n\n        // store the plugin’s permitted function selectors and external contract calls to be able to validate calls\n        // to executeFromPlugin and executeFromPluginExternal\n        //////////////////////////////////////////////\n        // permissions for executeFromPlugin\n        //////////////////////////////////////////////\n        // native functions or execution functions already installed on the MSCA that this plugin will be able to call\n        length = pluginManifest.permittedExecutionSelectors.length;\n        for (uint256 i = 0; i < length; ++i) {\n            // enable PermittedPluginCall\n            storageLayout.permittedPluginCalls[plugin][pluginManifest.permittedExecutionSelectors[i]] = true;\n        }\n\n        //////////////////////////////////////////////\n        // permissions for executeFromPluginExternal\n        //////////////////////////////////////////////\n        // is the plugin permitted to call any external contracts and selectors\n        if (pluginManifest.permitAnyExternalAddress) {\n            storageLayout.pluginDetails[plugin].anyExternalAddressPermitted = true;\n        } else {\n            // more limited access - record external contract calls that this plugin will be able to make\n            length = pluginManifest.permittedExternalCalls.length;\n            for (uint256 i = 0; i < length; ++i) {\n                ManifestExternalCallPermission memory externalCallPermission = pluginManifest.permittedExternalCalls[i];\n                PermittedExternalCall storage permittedExternalCall =\n                    storageLayout.permittedExternalCalls[plugin][externalCallPermission.externalAddress];\n                if (permittedExternalCall.addressPermitted) {\n                    revert ExecuteFromPluginExternalAlreadySet(plugin, externalCallPermission.externalAddress);\n                }\n                permittedExternalCall.addressPermitted = true;\n                if (externalCallPermission.permitAnySelector) {\n                    permittedExternalCall.anySelector = true;\n                } else {\n                    uint256 permittedExternalCallSelectorsLength = externalCallPermission.selectors.length;\n                    for (uint256 j = 0; j < permittedExternalCallSelectorsLength; ++j) {\n                        permittedExternalCall.selectors[externalCallPermission.selectors[j]] = true;\n                    }\n                }\n            }\n        }\n\n        // call onInstall to initialize plugin data for the modular account\n        // solhint-disable-next-line no-empty-blocks\n        try IPlugin(plugin).onInstall(pluginInstallData) {}\n        catch (bytes memory revertReason) {\n            revert FailToCallOnInstall(plugin, revertReason);\n        }\n    }\n\n    /// @dev Refer to IPluginManager\n    function uninstall(address plugin, bytes memory config, bytes memory pluginUninstallData)\n        external\n        onlyDelegated\n        returns (bool)\n    {\n        WalletStorageV1Lib.Layout storage storageLayout = WalletStorageV1Lib.getLayout();\n        // revert internally if plugin was not installed before\n        storageLayout.installedPlugins.remove(plugin);\n        PluginManifest memory pluginManifest;\n        if (config.length > 0) {\n            // the modular account MAY implement the capability for the manifest to be encoded in the config field as a\n            // parameter\n            pluginManifest = abi.decode(config, (PluginManifest));\n        } else {\n            pluginManifest = IPlugin(plugin).pluginManifest();\n        }\n        // revert if the hash of the manifest used at install time does not match the computed Keccak-256 hash of the\n        // plugin’s current manifest\n        if (storageLayout.pluginDetails[plugin].manifestHash != keccak256(abi.encode(pluginManifest))) {\n            revert InvalidPluginManifestHash();\n        }\n        // revert if there is at least 1 other installed plugin that depends on validation functions or hooks added by\n        // this plugin;\n        // plugins used as dependencies must not be uninstalled while dependent plugins exist\n        if (storageLayout.pluginDetails[plugin].dependentCounter != 0) {\n            revert PluginUsedByOthers(plugin);\n        }\n        // each dependency’s record SHOULD be updated to reflect that it has no longer has this plugin as a dependent\n        _removeDependencies(plugin, storageLayout);\n        // remove records for the plugin’s dependencies, injected permitted call hooks, permitted function selectors,\n        // and permitted external contract calls\n        // uninstall the components in reverse order (by component type) of their installation\n        //////////////////////////////////////////////\n        // permissions for executeFromPluginExternal\n        //////////////////////////////////////////////\n        if (pluginManifest.permitAnyExternalAddress) {\n            storageLayout.pluginDetails[plugin].anyExternalAddressPermitted = false;\n        }\n        uint256 length;\n        if (!pluginManifest.permitAnyExternalAddress) {\n            length = pluginManifest.permittedExternalCalls.length;\n            for (uint256 i = 0; i < length; ++i) {\n                ManifestExternalCallPermission memory externalCallPermission = pluginManifest.permittedExternalCalls[i];\n                PermittedExternalCall storage permittedExternalCall =\n                    storageLayout.permittedExternalCalls[plugin][externalCallPermission.externalAddress];\n                if (!permittedExternalCall.addressPermitted) {\n                    revert ExecuteFromPluginExternalAlreadyUnset(plugin, externalCallPermission.externalAddress);\n                }\n                permittedExternalCall.addressPermitted = false;\n                if (externalCallPermission.permitAnySelector) {\n                    permittedExternalCall.anySelector = false;\n                } else {\n                    uint256 permittedExternalCallSelectorsLength = externalCallPermission.selectors.length;\n                    for (uint256 j = 0; j < permittedExternalCallSelectorsLength; ++j) {\n                        permittedExternalCall.selectors[externalCallPermission.selectors[j]] = false;\n                    }\n                }\n            }\n        }\n\n        length = pluginManifest.permittedExecutionSelectors.length;\n        for (uint256 i = 0; i < length; ++i) {\n            // disable PermittedPluginCall\n            storageLayout.permittedPluginCalls[plugin][pluginManifest.permittedExecutionSelectors[i]] = false;\n        }\n\n        //////////////////////////////////////////////\n        // uninstall validation functions and hooks\n        //////////////////////////////////////////////\n        // uninstall preRuntimeValidationHooks\n        FunctionReference[] memory emptyDependencies = new FunctionReference[](0);\n        length = pluginManifest.preRuntimeValidationHooks.length;\n        for (uint256 i = 0; i < length; ++i) {\n            // revert internally\n            storageLayout.executionDetails[pluginManifest.preRuntimeValidationHooks[i].executionSelector]\n                .preRuntimeValidationHooks\n                .remove(\n                _resolveManifestFunction(\n                    pluginManifest.preRuntimeValidationHooks[i].associatedFunction,\n                    plugin,\n                    emptyDependencies,\n                    ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                    AssociatedFunctionType.HOOK\n                )\n            );\n        }\n        // uninstall preUserOpValidationHooks\n        length = pluginManifest.preUserOpValidationHooks.length;\n        for (uint256 i = 0; i < length; ++i) {\n            // revert internally\n            storageLayout.executionDetails[pluginManifest.preUserOpValidationHooks[i].executionSelector]\n                .preUserOpValidationHooks\n                .remove(\n                _resolveManifestFunction(\n                    pluginManifest.preUserOpValidationHooks[i].associatedFunction,\n                    plugin,\n                    emptyDependencies,\n                    ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                    AssociatedFunctionType.HOOK\n                )\n            );\n        }\n        // uninstall runtimeValidationFunctions\n        FunctionReference memory emptyFunctionReference = EMPTY_FUNCTION_REFERENCE.unpack();\n        length = pluginManifest.runtimeValidationFunctions.length;\n        for (uint256 i = 0; i < length; ++i) {\n            storageLayout.executionDetails[pluginManifest.runtimeValidationFunctions[i].executionSelector]\n                .runtimeValidationFunction = emptyFunctionReference;\n        }\n        // uninstall userOpValidationFunctions\n        length = pluginManifest.userOpValidationFunctions.length;\n        for (uint256 i = 0; i < length; ++i) {\n            storageLayout.executionDetails[pluginManifest.userOpValidationFunctions[i].executionSelector]\n                .userOpValidationFunction = emptyFunctionReference;\n        }\n\n        //////////////////////////////////////////////\n        // uninstall execution functions and hooks\n        //////////////////////////////////////////////\n        _removeExecutionHooks(plugin, pluginManifest.executionHooks, storageLayout);\n        length = pluginManifest.executionFunctions.length;\n        for (uint256 i = 0; i < length; ++i) {\n            storageLayout.executionDetails[pluginManifest.executionFunctions[i]].plugin = address(0);\n        }\n\n        length = pluginManifest.interfaceIds.length;\n        for (uint256 i = 0; i < length; ++i) {\n            storageLayout.supportedInterfaces[pluginManifest.interfaceIds[i]] -= 1;\n        }\n        // reset all members that are not mappings and also recurse into the members unless they're mappings\n        delete storageLayout.pluginDetails[plugin];\n        // call the plugin’s onUninstall callback with the data provided in the uninstallData parameter;\n        // This serves to clear the plugin state for the modular account;\n        // If onUninstall reverts, execution SHOULD continue to allow the uninstall to complete\n        bool onUninstallSucceeded = true;\n        // solhint-disable-next-line no-empty-blocks\n        try IPlugin(plugin).onUninstall(pluginUninstallData) {}\n        catch {\n            // leave it up to the caller if we want to revert if the plugin storage isn't cleaned up\n            onUninstallSucceeded = false;\n        }\n        return onUninstallSucceeded;\n    }\n\n    /**\n     * @dev Resolve manifest function.\n     *      For functions of type `ManifestAssociatedFunctionType.DEPENDENCY`, the MSCA MUST find the plugin address\n     *      of the function at `dependencies[dependencyIndex]` during the call to `installPlugin(config)`.\n     *      A plugin can no longer use hooks from other plugins to be added on Execution and/or Validation function\n     * selectors\n     *      in its own manifest. We'll revert if hook is provided as dependency from an external plugin.\n     * @param allowedMagicValue which magic value (if any) is permissible for the function type to resolve.\n     * @param associatedFunctionType the type of associated function, either a validation function or a hook, as opposed\n     * to execution functions\n     */\n    function _resolveManifestFunction(\n        ManifestFunction memory manifestFunction,\n        address plugin,\n        FunctionReference[] memory dependencies,\n        ManifestAssociatedFunctionType allowedMagicValue,\n        AssociatedFunctionType associatedFunctionType\n    ) internal pure returns (FunctionReference memory) {\n        // revert if it's hook and provided as dependency\n        if (\n            associatedFunctionType == AssociatedFunctionType.HOOK\n                && manifestFunction.functionType == ManifestAssociatedFunctionType.DEPENDENCY\n        ) {\n            revert HookDependencyNotPermitted();\n        }\n        if (manifestFunction.functionType == ManifestAssociatedFunctionType.SELF) {\n            return FunctionReference(plugin, manifestFunction.functionId);\n        } else if (manifestFunction.functionType == ManifestAssociatedFunctionType.DEPENDENCY) {\n            // out of boundary\n            if (manifestFunction.dependencyIndex >= dependencies.length) {\n                revert InvalidPluginManifest();\n            }\n            return dependencies[manifestFunction.dependencyIndex];\n        } else if (manifestFunction.functionType == ManifestAssociatedFunctionType.RUNTIME_VALIDATION_ALWAYS_ALLOW) {\n            if (allowedMagicValue == ManifestAssociatedFunctionType.RUNTIME_VALIDATION_ALWAYS_ALLOW) {\n                return RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE.unpack();\n            } else {\n                revert InvalidPluginManifest();\n            }\n        } else if (manifestFunction.functionType == ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY) {\n            if (allowedMagicValue == ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY) {\n                return PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE.unpack();\n            } else {\n                revert InvalidPluginManifest();\n            }\n        } else {\n            return EMPTY_FUNCTION_REFERENCE.unpack();\n        }\n    }\n\n    function _addHookGroup(\n        HookGroup storage hookGroup,\n        FunctionReference memory preExecHook,\n        FunctionReference memory postExecHook\n    ) internal {\n        bytes21 packedPreExecHook = preExecHook.pack();\n        if (packedPreExecHook == EMPTY_FUNCTION_REFERENCE) {\n            if (postExecHook.pack() == EMPTY_FUNCTION_REFERENCE) {\n                // pre and post hooks cannot be null at the same time\n                revert InvalidFunctionReference();\n            }\n            hookGroup.postOnlyHooks.append(postExecHook);\n        } else {\n            hookGroup.preHooks.append(preExecHook);\n            if (postExecHook.pack() != EMPTY_FUNCTION_REFERENCE) {\n                hookGroup.preToPostHooks[packedPreExecHook].append(postExecHook);\n            }\n        }\n    }\n\n    function _removeHookGroup(\n        HookGroup storage hookGroup,\n        FunctionReference memory preExecHook,\n        FunctionReference memory postExecHook\n    ) internal {\n        bytes21 packedPreExecHook = preExecHook.pack();\n        if (packedPreExecHook == EMPTY_FUNCTION_REFERENCE) {\n            // pre and post hooks cannot be null at the same time\n            hookGroup.postOnlyHooks.remove(postExecHook);\n        } else {\n            hookGroup.preHooks.remove(preExecHook);\n            // remove postExecHook if any\n            if (postExecHook.pack() != EMPTY_FUNCTION_REFERENCE) {\n                hookGroup.preToPostHooks[packedPreExecHook].remove(postExecHook);\n            }\n        }\n    }\n\n    function _removeDependencies(address plugin, WalletStorageV1Lib.Layout storage storageLayout) internal {\n        Bytes21DLL storage pluginDependencies = storageLayout.pluginDetails[plugin].dependencies;\n        uint256 length = pluginDependencies.size();\n        FunctionReference memory startFR = EMPTY_FUNCTION_REFERENCE.unpack();\n        FunctionReference[] memory dependencies;\n        for (uint256 i = 0; i < length; ++i) {\n            (dependencies, startFR) = pluginDependencies.getPaginated(startFR, 100);\n            for (uint256 j = 0; j < dependencies.length; ++j) {\n                storageLayout.pluginDetails[dependencies[j].plugin].dependentCounter -= 1;\n                storageLayout.pluginDetails[plugin].dependencies.remove(dependencies[j]);\n            }\n            if (startFR.pack() == EMPTY_FUNCTION_REFERENCE) {\n                break;\n            }\n        }\n    }\n\n    function _removeExecutionHooks(\n        address plugin,\n        ManifestExecutionHook[] memory executionHooks,\n        WalletStorageV1Lib.Layout storage storageLayout\n    ) internal {\n        uint256 length = executionHooks.length;\n        FunctionReference[] memory dependencies = new FunctionReference[](0);\n        for (uint256 i = 0; i < length; ++i) {\n            bytes4 selector = executionHooks[i].selector;\n            FunctionReference memory preExecHook = _resolveManifestFunction(\n                executionHooks[i].preExecHook,\n                plugin,\n                dependencies,\n                ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                AssociatedFunctionType.HOOK\n            );\n            FunctionReference memory postExecHookToRemove = _resolveManifestFunction(\n                executionHooks[i].postExecHook,\n                plugin,\n                dependencies,\n                ManifestAssociatedFunctionType.NONE,\n                AssociatedFunctionType.HOOK\n            );\n            _removeHookGroup(storageLayout.executionDetails[selector].executionHooks, preExecHook, postExecHookToRemove);\n        }\n    }\n}\n"},"src/msca/6900/v0.7/account/BaseMSCA.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {\n    EMPTY_FUNCTION_REFERENCE,\n    SENTINEL_BYTES21,\n    WALLET_AUTHOR,\n    WALLET_VERSION_1\n} from \"../../../../common/Constants.sol\";\nimport {ExecutionUtils} from \"../../../../utils/ExecutionUtils.sol\";\nimport {\n    InvalidAuthorizer,\n    InvalidExecutionFunction,\n    InvalidValidationFunctionId,\n    NotFoundSelector,\n    UnauthorizedCaller\n} from \"../../shared/common/Errors.sol\";\nimport {AddressDLL, ValidationData} from \"../../shared/common/Structs.sol\";\nimport {AddressDLLLib} from \"../../shared/libs/AddressDLLLib.sol\";\nimport {ValidationDataLib} from \"../../shared/libs/ValidationDataLib.sol\";\nimport {\n    PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE,\n    RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE\n} from \"../common/Constants.sol\";\nimport \"../common/Structs.sol\";\nimport {IAccountLoupe} from \"../interfaces/IAccountLoupe.sol\";\nimport {IPlugin} from \"../interfaces/IPlugin.sol\";\nimport {IPluginExecutor} from \"../interfaces/IPluginExecutor.sol\";\nimport {IPluginManager} from \"../interfaces/IPluginManager.sol\";\nimport {IStandardExecutor} from \"../interfaces/IStandardExecutor.sol\";\nimport {ExecutionHookLib} from \"../libs/ExecutionHookLib.sol\";\nimport {FunctionReferenceLib} from \"../libs/FunctionReferenceLib.sol\";\nimport {RepeatableFunctionReferenceDLLLib} from \"../libs/RepeatableFunctionReferenceDLLLib.sol\";\n\nimport {SelectorRegistryLib} from \"../libs/SelectorRegistryLib.sol\";\nimport {WalletStorageV1Lib} from \"../libs/WalletStorageV1Lib.sol\";\nimport {PluginExecutor} from \"../managers/PluginExecutor.sol\";\nimport {PluginManager} from \"../managers/PluginManager.sol\";\nimport {StandardExecutor} from \"../managers/StandardExecutor.sol\";\n\nimport {WalletStorageInitializable} from \"./WalletStorageInitializable.sol\";\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\nimport {PackedUserOperation} from \"@account-abstraction/contracts/interfaces/PackedUserOperation.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Base MSCA implementation with **authentication**.\n * This contract provides the basic logic for implementing the MSCA interfaces;\n * specific account implementation should inherit this contract.\n */\nabstract contract BaseMSCA is\n    WalletStorageInitializable,\n    IPluginManager,\n    IAccountLoupe,\n    IStandardExecutor,\n    IPluginExecutor,\n    IERC165\n{\n    using RepeatableFunctionReferenceDLLLib for RepeatableBytes21DLL;\n    using FunctionReferenceLib for bytes21;\n    using FunctionReferenceLib for FunctionReference;\n    using ExecutionHookLib for HookGroup;\n    using ExecutionHookLib for PostExecHookToRun[];\n    using ExecutionUtils for address;\n    using PluginExecutor for bytes;\n    using StandardExecutor for address;\n    using StandardExecutor for Call[];\n    using AddressDLLLib for AddressDLL;\n    using ValidationDataLib for ValidationData;\n    using SelectorRegistryLib for bytes4;\n\n    string public constant author = WALLET_AUTHOR;\n    string public constant version = WALLET_VERSION_1;\n    // 4337 related immutable storage\n    IEntryPoint public immutable entryPoint;\n    PluginManager public immutable pluginManager;\n\n    error NotNativeFunctionSelector(bytes4 selector);\n    error InvalidHookFunctionId(uint8 functionId);\n    error PreRuntimeValidationHookFailed(address plugin, uint8 functionId, bytes revertReason);\n    error RuntimeValidationFailed(address plugin, uint8 functionId, bytes revertReason);\n\n    /**\n     * @dev Wraps execution of a native function (as opposed to a function added by plugins) with runtime validations\n     * (not from EP)\n     *      and hooks. Used by execute, executeBatch, installPlugin, uninstallPlugin, upgradeTo and upgradeToAndCall.\n     *      If the call is from entry point, then validateUserOp will run.\n     *      https://eips.ethereum.org/assets/eip-6900/Modular_Account_Call_Flow.svg\n     */\n    modifier validateNativeFunction() {\n        PostExecHookToRun[] memory postExecHooks = _processPreExecHooks();\n        _;\n        postExecHooks._processPostExecHooks();\n    }\n\n    /**\n     * @dev This function allows entry point or SA itself to execute certain actions.\n     * If the caller is not authorized, the function will revert with an error message.\n     */\n    modifier onlyFromEntryPointOrSelf() {\n        _checkAccessRuleFromEPOrAcctItself();\n        _;\n    }\n\n    constructor(IEntryPoint _newEntryPoint, PluginManager _newPluginManager) {\n        entryPoint = _newEntryPoint;\n        pluginManager = _newPluginManager;\n        // lock the implementation contract so it can only be called from proxies\n        _disableWalletStorageInitializers();\n    }\n\n    receive() external payable {}\n\n    /// @notice Manage fallback calls made to the plugins.\n    /// @dev Route calls to execution functions based on incoming msg.sig\n    ///      If there's no plugin associated with this function selector, revert\n    fallback(bytes calldata) external payable returns (bytes memory result) {\n        // run runtime validation before we load the executionDetail because validation may update account state\n        if (msg.sender != address(entryPoint)) {\n            // entryPoint should go through validateUserOp flow which calls userOpValidationFunction\n            _processPreRuntimeHooksAndValidation(msg.sig);\n        }\n        // load the executionDetail before we run the preExecHooks because they may modify the plugins\n        ExecutionDetail storage executionDetail = WalletStorageV1Lib.getLayout().executionDetails[msg.sig];\n        address executionFunctionPlugin = executionDetail.plugin;\n        // valid plugin address should not be 0\n        if (executionFunctionPlugin == address(0)) {\n            revert InvalidExecutionFunction(msg.sig);\n        }\n        PostExecHookToRun[] memory postExecHooks = executionDetail.executionHooks._processPreExecHooks(msg.data);\n        result = ExecutionUtils.callWithReturnDataOrRevert(executionFunctionPlugin, msg.value, msg.data);\n        postExecHooks._processPostExecHooks();\n        return result;\n    }\n\n    /**\n     * @dev Return the entryPoint used by this account.\n     * subclass should return the current entryPoint used by this account.\n     */\n    function getEntryPoint() external view returns (IEntryPoint) {\n        return entryPoint;\n    }\n\n    /**\n     * @dev Validate user's signature and nonce.\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation\n     * methods.\n     */\n    function validateUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\n        external\n        virtual\n        returns (uint256 validationData)\n    {\n        if (msg.sender != address(entryPoint)) {\n            revert UnauthorizedCaller();\n        }\n        validationData = _authenticateAndAuthorizeUserOp(userOp, userOpHash);\n        if (missingAccountFunds != 0) {\n            (bool success,) = payable(msg.sender).call{value: missingAccountFunds, gas: type(uint256).max}(\"\");\n            (success);\n            // ignore failure (its EntryPoint's job to verify, not account.)\n        }\n    }\n\n    /// @notice ERC165 introspection https://eips.ethereum.org/EIPS/eip-165\n    /// @dev returns true for `IERC165.interfaceId` and false for `0xFFFFFFFF`\n    /// @param interfaceId interface id to check against\n    /// @return bool support for specific interface\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        if (interfaceId == 0xffffffff) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return WalletStorageV1Lib.getLayout().supportedInterfaces[interfaceId] > 0;\n    }\n\n    /**\n     * @dev Return the account nonce.\n     * This method returns the next sequential nonce.\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\n     */\n    function getNonce() public view virtual returns (uint256) {\n        return entryPoint.getNonce(address(this), 0);\n    }\n\n    function installPlugin(\n        address plugin,\n        bytes32 manifestHash,\n        bytes memory pluginInstallData,\n        FunctionReference[] memory dependencies\n    ) external override validateNativeFunction {\n        bytes memory data = abi.encodeCall(\n            PluginManager.install, (plugin, manifestHash, pluginInstallData, dependencies, address(this))\n        );\n        address(pluginManager).delegateCall(data);\n        emit PluginInstalled(plugin, manifestHash, dependencies);\n    }\n\n    function uninstallPlugin(address plugin, bytes memory config, bytes memory pluginUninstallData)\n        external\n        override\n        validateNativeFunction\n    {\n        bytes memory data = abi.encodeCall(PluginManager.uninstall, (plugin, config, pluginUninstallData));\n        address(pluginManager).delegateCall(data);\n        emit PluginUninstalled(plugin, true);\n    }\n\n    function execute(address target, uint256 value, bytes calldata data)\n        external\n        payable\n        override\n        validateNativeFunction\n        returns (bytes memory returnData)\n    {\n        return target.execute(value, data);\n    }\n\n    function executeBatch(Call[] calldata calls)\n        external\n        payable\n        override\n        validateNativeFunction\n        returns (bytes[] memory returnData)\n    {\n        return calls.executeBatch();\n    }\n\n    function executeFromPlugin(bytes calldata data) external payable override returns (bytes memory) {\n        return data.executeFromPlugin();\n    }\n\n    function executeFromPluginExternal(address target, uint256 value, bytes calldata data)\n        external\n        payable\n        override\n        returns (bytes memory)\n    {\n        return data.executeFromPluginToExternal(target, value);\n    }\n\n    /// @notice Gets the validation functions and plugin address for a selector\n    /// @dev If the selector is a native function, the plugin address will be the address of the account\n    /// @param selector The selector to get the configuration for\n    /// @return executionFunctionConfig The configuration for this selector\n    function getExecutionFunctionConfig(bytes4 selector)\n        external\n        view\n        returns (ExecutionFunctionConfig memory executionFunctionConfig)\n    {\n        WalletStorageV1Lib.Layout storage walletStorage = WalletStorageV1Lib.getLayout();\n        if (selector._isNativeFunctionSelector()) {\n            executionFunctionConfig.plugin = address(this);\n        } else {\n            executionFunctionConfig.plugin = walletStorage.executionDetails[selector].plugin;\n        }\n        executionFunctionConfig.userOpValidationFunction =\n            walletStorage.executionDetails[selector].userOpValidationFunction;\n        executionFunctionConfig.runtimeValidationFunction =\n            walletStorage.executionDetails[selector].runtimeValidationFunction;\n        return executionFunctionConfig;\n    }\n\n    /// @notice Gets the pre and post execution hooks for a selector\n    /// @param selector The selector to get the hooks for\n    /// @return executionHooks The pre and post execution hooks for this selector\n    function getExecutionHooks(bytes4 selector) external view returns (ExecutionHooks[] memory executionHooks) {\n        return WalletStorageV1Lib.getLayout().executionDetails[selector].executionHooks._getExecutionHooks();\n    }\n\n    /// @notice Gets the pre user op and runtime validation hooks associated with a selector\n    /// @param selector The selector to get the hooks for\n    /// @return preUserOpValidationHooks The pre user op validation hooks for this selector\n    /// @return preRuntimeValidationHooks The pre runtime validation hooks for this selector\n    function getPreValidationHooks(bytes4 selector)\n        external\n        view\n        returns (\n            FunctionReference[] memory preUserOpValidationHooks,\n            FunctionReference[] memory preRuntimeValidationHooks\n        )\n    {\n        preUserOpValidationHooks =\n            WalletStorageV1Lib.getLayout().executionDetails[selector].preUserOpValidationHooks.getAll();\n        preRuntimeValidationHooks =\n            WalletStorageV1Lib.getLayout().executionDetails[selector].preRuntimeValidationHooks.getAll();\n        return (preUserOpValidationHooks, preRuntimeValidationHooks);\n    }\n\n    /// @notice Gets an array of all installed plugins\n    /// @return pluginAddresses The addresses of all installed plugins\n    function getInstalledPlugins() external view returns (address[] memory pluginAddresses) {\n        return WalletStorageV1Lib.getLayout().installedPlugins.getAll();\n    }\n\n    /**\n     * Check current account deposit in the entryPoint.\n     */\n    function getDeposit() public view returns (uint256) {\n        return entryPoint.balanceOf(address(this));\n    }\n\n    /**\n     * Deposit more funds for this account in the entryPoint.\n     */\n    function addDeposit() public payable {\n        entryPoint.depositTo{value: msg.value}(address(this));\n    }\n\n    /**\n     * Withdraw value from the account's deposit.\n     * @param withdrawAddress target to send to\n     * @param amount to withdraw\n     */\n    function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyFromEntryPointOrSelf {\n        entryPoint.withdrawTo(withdrawAddress, amount);\n    }\n\n    /**\n     * @dev Authenticate and authorize this userOp. OnlyFromEntryPoint is applied in the caller.\n     * @param userOp validate the userOp.signature field\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\n     *          (also hashes the entrypoint and chain id)\n     * @return validationData signature and time-range of this operation\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature\n     * failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly due to the storage rule.\n     */\n    function _authenticateAndAuthorizeUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash)\n        internal\n        virtual\n        returns (uint256 validationData)\n    {\n        // onlyFromEntryPoint is applied in the caller\n        // if there is no function defined for the selector, or if userOp.callData.length < 4, then execution MUST\n        // revert\n        if (userOp.callData.length < 4) {\n            revert NotFoundSelector();\n        }\n        bytes4 selector = bytes4(userOp.callData[0:4]);\n        if (selector == bytes4(0)) {\n            revert NotFoundSelector();\n        }\n        ExecutionDetail storage executionDetail = WalletStorageV1Lib.getLayout().executionDetails[selector];\n        FunctionReference memory validationFunction = executionDetail.userOpValidationFunction;\n        bytes21 packedValidationFunction = validationFunction.pack();\n        if (\n            packedValidationFunction == EMPTY_FUNCTION_REFERENCE\n                || packedValidationFunction == RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE\n                || packedValidationFunction == PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE\n        ) {\n            revert InvalidValidationFunctionId(validationFunction.functionId);\n        }\n        // pre hook\n        ValidationData memory unpackedValidationData =\n            _processPreUserOpValidationHooks(executionDetail, userOp, userOpHash);\n        IPlugin userOpValidatorPlugin = IPlugin(validationFunction.plugin);\n        // execute the validation function with the user operation and its hash as parameters using the call opcode\n        uint256 currentValidationData = userOpValidatorPlugin.userOpValidationFunction(\n            executionDetail.userOpValidationFunction.functionId, userOp, userOpHash\n        );\n        // intercept with validation function call\n        unpackedValidationData = unpackedValidationData._intersectValidationData(currentValidationData);\n        if (unpackedValidationData.authorizer != address(0) && unpackedValidationData.authorizer != address(1)) {\n            // only revert on unexpected values\n            revert InvalidAuthorizer();\n        }\n        validationData = unpackedValidationData._packValidationData();\n    }\n\n    /**\n     * @dev Default validation logic is from installed plugins. However, you can override this validation logic in MSCA\n     *      implementations. For instance, semi MSCA such as single owner semi MSCA may want to honor the validation\n     *      from native owner.\n     */\n    function _processPreRuntimeHooksAndValidation(bytes4 selector) internal virtual {\n        FunctionReference memory validationFunction =\n            WalletStorageV1Lib.getLayout().executionDetails[selector].runtimeValidationFunction;\n        bytes21 packedValidationFunction = validationFunction.pack();\n        if (\n            packedValidationFunction == EMPTY_FUNCTION_REFERENCE\n                || packedValidationFunction == PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE\n        ) {\n            revert InvalidValidationFunctionId(validationFunction.functionId);\n        }\n        RepeatableBytes21DLL storage preRuntimeValidationHooksDLL =\n            WalletStorageV1Lib.getLayout().executionDetails[selector].preRuntimeValidationHooks;\n        uint256 totalUniqueHookCount = preRuntimeValidationHooksDLL.getUniqueItems();\n        FunctionReference memory startHook = EMPTY_FUNCTION_REFERENCE.unpack();\n        FunctionReference[] memory preRuntimeValidationHooks;\n        FunctionReference memory nextHook;\n        for (uint256 i = 0; i < totalUniqueHookCount; ++i) {\n            (preRuntimeValidationHooks, nextHook) = preRuntimeValidationHooksDLL.getPaginated(startHook, 10);\n            for (uint256 j = 0; j < preRuntimeValidationHooks.length; ++j) {\n                // revert on EMPTY_FUNCTION_REFERENCE, RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE,\n                // PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE\n                // if any revert, the outer call MUST revert\n                bytes21 packedPreRuntimeValidationHook = preRuntimeValidationHooks[j].pack();\n                if (\n                    packedPreRuntimeValidationHook == EMPTY_FUNCTION_REFERENCE\n                        || packedPreRuntimeValidationHook == RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE\n                        || packedPreRuntimeValidationHook == PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE\n                ) {\n                    revert InvalidValidationFunctionId(preRuntimeValidationHooks[j].functionId);\n                }\n                IPlugin preRuntimeValidationHookPlugin = IPlugin(preRuntimeValidationHooks[j].plugin);\n                try preRuntimeValidationHookPlugin.preRuntimeValidationHook(\n                    preRuntimeValidationHooks[j].functionId, msg.sender, msg.value, msg.data\n                ) {} catch (bytes memory revertReason) {\n                    revert PreRuntimeValidationHookFailed(\n                        preRuntimeValidationHooks[j].plugin, preRuntimeValidationHooks[j].functionId, revertReason\n                    );\n                }\n            }\n            if (nextHook.pack() == SENTINEL_BYTES21) {\n                break;\n            }\n            startHook = nextHook;\n        }\n        // call runtimeValidationFunction if it's not always allowed\n        if (packedValidationFunction != RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE) {\n            try IPlugin(validationFunction.plugin).runtimeValidationFunction(\n                validationFunction.functionId, msg.sender, msg.value, msg.data\n            ) {} catch (bytes memory revertReason) {\n                revert RuntimeValidationFailed(validationFunction.plugin, validationFunction.functionId, revertReason);\n            }\n        }\n    }\n\n    /// @dev Also runs runtime hooks and validation if msg.sender is not from entry point.\n    function _processPreExecHooks() internal returns (PostExecHookToRun[] memory) {\n        if (!msg.sig._isNativeFunctionSelector()) {\n            revert NotNativeFunctionSelector(msg.sig);\n        }\n        if (msg.sender != address(entryPoint)) {\n            // entryPoint should go through validateUserOp flow which calls userOpValidationFunction\n            _processPreRuntimeHooksAndValidation(msg.sig);\n        }\n        return WalletStorageV1Lib.getLayout().executionDetails[msg.sig].executionHooks._processPreExecHooks(msg.data);\n    }\n\n    function _processPreUserOpValidationHooks(\n        ExecutionDetail storage executionDetail,\n        PackedUserOperation calldata userOp,\n        bytes32 userOpHash\n    ) internal virtual returns (ValidationData memory unpackedValidationData) {\n        unpackedValidationData = ValidationData(0, 0xFFFFFFFFFFFF, address(0));\n        // if the function selector has associated pre user operation validation hooks, then those hooks MUST be run\n        // sequentially\n        uint256 totalUniqueHookCount = executionDetail.preUserOpValidationHooks.getUniqueItems();\n        FunctionReference memory startHook = EMPTY_FUNCTION_REFERENCE.unpack();\n        FunctionReference[] memory preUserOpValidatorHooks;\n        FunctionReference memory nextHook;\n        uint256 currentValidationData;\n        for (uint256 i = 0; i < totalUniqueHookCount; ++i) {\n            (preUserOpValidatorHooks, nextHook) = executionDetail.preUserOpValidationHooks.getPaginated(startHook, 10);\n            for (uint256 j = 0; j < preUserOpValidatorHooks.length; ++j) {\n                bytes21 packedUserOpValidatorHook = preUserOpValidatorHooks[j].pack();\n                // if any revert, the outer call MUST revert\n                if (\n                    packedUserOpValidatorHook == EMPTY_FUNCTION_REFERENCE\n                        || packedUserOpValidatorHook == RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE\n                        || packedUserOpValidatorHook == PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE\n                ) {\n                    revert InvalidHookFunctionId(preUserOpValidatorHooks[j].functionId);\n                }\n                IPlugin preUserOpValidationHookPlugin = IPlugin(preUserOpValidatorHooks[j].plugin);\n                currentValidationData = preUserOpValidationHookPlugin.preUserOpValidationHook(\n                    preUserOpValidatorHooks[j].functionId, userOp, userOpHash\n                );\n                unpackedValidationData = unpackedValidationData._intersectValidationData(currentValidationData);\n                // if any return an authorizer value other than 0 or 1, execution MUST revert\n                if (unpackedValidationData.authorizer != address(0) && unpackedValidationData.authorizer != address(1))\n                {\n                    revert InvalidAuthorizer();\n                }\n            }\n            if (nextHook.pack() == SENTINEL_BYTES21) {\n                break;\n            }\n            startHook = nextHook;\n        }\n        return unpackedValidationData;\n    }\n\n    function _checkAccessRuleFromEPOrAcctItself() internal view {\n        if (msg.sender != address(entryPoint) && msg.sender != address(this)) {\n            revert UnauthorizedCaller();\n        }\n    }\n}\n"},"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol":{"content":"/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./PackedUserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n    /***\n     * An event emitted after each successful request.\n     * @param userOpHash    - Unique identifier for the request (hash its entire content, except signature).\n     * @param sender        - The account that generates this request.\n     * @param paymaster     - If non-null, the paymaster that pays for this request.\n     * @param nonce         - The nonce value from the request.\n     * @param success       - True if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - Actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - Total gas used by this UserOperation (including preVerification, creation,\n     *                        validation and execution).\n     */\n    event UserOperationEvent(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        address indexed paymaster,\n        uint256 nonce,\n        bool success,\n        uint256 actualGasCost,\n        uint256 actualGasUsed\n    );\n\n    /**\n     * Account \"sender\" was deployed.\n     * @param userOpHash - The userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender     - The account that is deployed\n     * @param factory    - The factory used to deploy this account (in the initCode)\n     * @param paymaster  - The paymaster used by this UserOp\n     */\n    event AccountDeployed(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        address factory,\n        address paymaster\n    );\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     * @param revertReason - The return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce,\n        bytes revertReason\n    );\n\n    /**\n     * An event emitted if the UserOperation Paymaster's \"postOp\" call reverted with non-zero length.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     * @param revertReason - The return bytes from the (reverted) call to \"callData\".\n     */\n    event PostOpRevertReason(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce,\n        bytes revertReason\n    );\n\n    /**\n     * UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     */\n    event UserOperationPrefundTooLow(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce\n    );\n\n    /**\n     * An event emitted by handleOps(), before starting the execution loop.\n     * Any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * Signature aggregator used by the following UserOperationEvents within this bundle.\n     * @param aggregator - The aggregator used for the following UserOperationEvents.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * A custom revert error of handleOps, to identify the offending op.\n     * Should be caught in off-chain handleOps simulation and not happen on-chain.\n     * Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     * NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n     * @param reason  - Revert reason. The string starts with a unique code \"AAmn\",\n     *                  where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *                  so a failure can be attributed to the correct entity.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * A custom revert error of handleOps, to report a revert by account or paymaster.\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n     * @param reason  - Revert reason. see FailedOp(uint256,string), above\n     * @param inner   - data from inner cought revert reason\n     * @dev note that inner is truncated to 2048 bytes\n     */\n    error FailedOpWithRevert(uint256 opIndex, string reason, bytes inner);\n\n    error PostOpReverted(bytes returnData);\n\n    /**\n     * Error case when a signature aggregator fails to verify the aggregated signature it had created.\n     * @param aggregator The aggregator that failed to verify the signature\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    // Return value of getSenderAddress.\n    error SenderAddressResult(address sender);\n\n    // UserOps handled, per aggregator.\n    struct UserOpsPerAggregator {\n        PackedUserOperation[] userOps;\n        // Aggregator address\n        IAggregator aggregator;\n        // Aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperations.\n     * No signature aggregator is used.\n     * If any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops         - The operations to execute.\n     * @param beneficiary - The address to receive the fees.\n     */\n    function handleOps(\n        PackedUserOperation[] calldata ops,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator - The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\n     * @param beneficiary      - The address to receive the fees.\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * Generate a request Id - unique identifier for this request.\n     * The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     * @param userOp - The user operation to generate the request ID for.\n     * @return hash the hash of this UserOperation\n     */\n    function getUserOpHash(\n        PackedUserOperation calldata userOp\n    ) external view returns (bytes32);\n\n    /**\n     * Gas and return values during simulation.\n     * @param preOpGas         - The gas used for validation (including preValidationGas)\n     * @param prefund          - The required prefund for this operation\n     * @param accountValidationData   - returned validationData from account.\n     * @param paymasterValidationData - return validationData from paymaster.\n     * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        uint256 accountValidationData;\n        uint256 paymasterValidationData;\n        bytes paymasterContext;\n    }\n\n    /**\n     * Returned aggregated signature info:\n     * The aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     * Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * This method always revert, and returns the address in SenderAddressResult error\n     * @param initCode - The constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n    error DelegateAndRevert(bool success, bytes ret);\n\n    /**\n     * Helper method for dry-run testing.\n     * @dev calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.\n     *  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace\n     *  actual EntryPoint code is less convenient.\n     * @param target a target contract to make a delegatecall from entrypoint\n     * @param data data to pass to target in a delegatecall\n     */\n    function delegateAndRevert(address target, bytes calldata data) external;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"},"src/common/Constants.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\n// ERC4337 constants\n\n// return value in case of signature failure, with no time-range.\n// equivalent to _packValidationData(true,0,0);\nuint256 constant SIG_VALIDATION_FAILED = 1;\nuint256 constant SIG_VALIDATION_SUCCEEDED = 0;\n\n// sentinel values\n// any values less than or equal to this will not be allowed in storage\nbytes21 constant SENTINEL_BYTES21 = bytes21(0);\nbytes23 constant SENTINEL_BYTES23 = bytes23(0);\nbytes4 constant SENTINEL_BYTES4 = bytes4(0);\nbytes32 constant SENTINEL_BYTES32 = bytes32(0);\n\n// empty or unset function reference\n// we don't store the empty function reference\nbytes21 constant EMPTY_FUNCTION_REFERENCE = bytes21(0);\n\n// wallet constants\nstring constant WALLET_AUTHOR = \"Circle Internet Financial\";\nstring constant WALLET_VERSION_1 = \"1.0.0\";\n\n// plugin constants\nstring constant PLUGIN_AUTHOR = \"Circle Internet Financial\";\nstring constant PLUGIN_VERSION_1 = \"1.0.0\";\n\n// bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\nbytes4 constant EIP1271_VALID_SIGNATURE = 0x1626ba7e;\nbytes4 constant EIP1271_INVALID_SIGNATURE = 0xffffffff;\n\n// keccak256('')\nbytes32 constant EMPTY_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\nuint256 constant ZERO = 0;\n\nbytes32 constant ZERO_BYTES32 = bytes32(0);\nbytes24 constant EMPTY_MODULE_ENTITY = bytes24(0);\n"},"src/msca/6900/shared/common/Structs.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\n/**\n * @dev Returned data from validateUserOp.\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n * @param validAfter - this UserOp is valid only after this timestamp.\n * @param validaUntil - this UserOp is valid only up to this timestamp.\n * @param authorizer - address(0) - the account validated the signature by itself.\n *                     address(1) - the account failed to validate the signature.\n *                     otherwise - this is an address of a signature aggregator that must be used to validate the\n * signature.\n */\nstruct ValidationData {\n    uint48 validAfter;\n    uint48 validUntil;\n    address authorizer;\n}\n\nstruct AddressDLL {\n    mapping(address => address) next;\n    mapping(address => address) prev;\n    uint256 count;\n}\n\nstruct Bytes4DLL {\n    mapping(bytes4 => bytes4) next;\n    mapping(bytes4 => bytes4) prev;\n    uint256 count;\n}\n\nstruct Bytes32DLL {\n    mapping(bytes32 => bytes32) next;\n    mapping(bytes32 => bytes32) prev;\n    uint256 count;\n}\n"},"src/msca/6900/shared/libs/AddressDLLLib.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {InvalidLimit, ItemAlreadyExists, ItemDoesNotExist} from \"../common/Errors.sol\";\nimport {AddressDLL} from \"../common/Structs.sol\";\n\n/**\n * @dev Enumerable & ordered doubly linked list built using mapping(address => address).\n *      Item is expected to be unique.\n */\nlibrary AddressDLLLib {\n    address constant SENTINEL_ADDRESS = address(0x0);\n    uint160 constant SENTINEL_ADDRESS_UINT = 0;\n\n    event AddressAdded(address indexed addr);\n    event AddressRemoved(address indexed addr);\n\n    error InvalidAddress();\n\n    modifier validAddress(address addr) {\n        if (uint160(addr) <= SENTINEL_ADDRESS_UINT) {\n            revert InvalidAddress();\n        }\n        _;\n    }\n\n    /**\n     * @dev Check if an item exists or not. O(1).\n     */\n    function contains(AddressDLL storage dll, address item) internal view returns (bool) {\n        return getHead(dll) == item || dll.next[item] != address(0) || dll.prev[item] != address(0);\n    }\n\n    /**\n     * @dev Get the count of dll. O(1).\n     */\n    function size(AddressDLL storage dll) internal view returns (uint256) {\n        return dll.count;\n    }\n\n    /**\n     * @dev Add an new item which did not exist before. Otherwise the function reverts. O(1).\n     */\n    function append(AddressDLL storage dll, address item) internal validAddress(item) returns (bool) {\n        if (contains(dll, item)) {\n            revert ItemAlreadyExists();\n        }\n        address prev = getTail(dll);\n        address next = SENTINEL_ADDRESS;\n        // prev.next = item\n        dll.next[prev] = item;\n        // item.next = next\n        dll.next[item] = next;\n        // next.prev = item\n        dll.prev[next] = item;\n        // item.prev = prev\n        dll.prev[item] = prev;\n        dll.count++;\n        emit AddressAdded(item);\n        return true;\n    }\n\n    /**\n     * @dev Remove an already existing item. Otherwise the function reverts. O(1).\n     */\n    function remove(AddressDLL storage dll, address item) internal validAddress(item) returns (bool) {\n        if (!contains(dll, item)) {\n            revert ItemDoesNotExist();\n        }\n        // item.prev.next = item.next\n        dll.next[dll.prev[item]] = dll.next[item];\n        // item.next.prev = item.prev\n        dll.prev[dll.next[item]] = dll.prev[item];\n        delete dll.next[item];\n        delete dll.prev[item];\n        dll.count--;\n        emit AddressRemoved(item);\n        return true;\n    }\n\n    /**\n     * @dev Return paginated addresses and next pointer address. O(n).\n     * @param start Starting address, inclusive, if start == address(0x0), this method searches from the head.\n     */\n    function getPaginated(AddressDLL storage dll, address start, uint256 limit)\n        internal\n        view\n        returns (address[] memory, address)\n    {\n        if (limit == 0) {\n            revert InvalidLimit();\n        }\n        address[] memory results = new address[](limit);\n        address current = start;\n        if (start == address(0)) {\n            current = getHead(dll);\n        }\n        uint256 count = 0;\n        for (; count < limit && uint160(current) > SENTINEL_ADDRESS_UINT; ++count) {\n            results[count] = current;\n            current = dll.next[current];\n        }\n        assembly (\"memory-safe\") {\n            mstore(results, count)\n        }\n        return (results, current);\n    }\n\n    /**\n     * @dev Return all the data. O(n).\n     */\n    function getAll(AddressDLL storage dll) internal view returns (address[] memory results) {\n        uint256 totalCount = size(dll);\n        results = new address[](totalCount);\n        uint256 accumulatedCount = 0;\n        address startAddr = address(0x0);\n        for (uint256 i = 0; i < totalCount; ++i) {\n            (address[] memory currentResults, address nextAddr) = getPaginated(dll, startAddr, 10);\n            for (uint256 j = 0; j < currentResults.length; ++j) {\n                results[accumulatedCount++] = currentResults[j];\n            }\n            if (nextAddr == SENTINEL_ADDRESS) {\n                break;\n            }\n            startAddr = nextAddr;\n        }\n        return results;\n    }\n\n    function getHead(AddressDLL storage dll) internal view returns (address) {\n        return dll.next[SENTINEL_ADDRESS];\n    }\n\n    function getTail(AddressDLL storage dll) internal view returns (address) {\n        return dll.prev[SENTINEL_ADDRESS];\n    }\n}\n"},"src/msca/6900/v0.7/common/Constants.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\n// magic value for runtime validation functions that always allow access\nbytes21 constant RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE = bytes21(uint168(1));\n\n// magic value for hooks that should always revert\nbytes21 constant PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE = bytes21(uint168(2));\n"},"src/msca/6900/v0.7/common/PluginManifest.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\n// Plugin Manifest\nenum ManifestAssociatedFunctionType {\n    // Function is not defined.\n    NONE,\n    // Function belongs to this plugin.\n    SELF,\n    // Function belongs to an external plugin provided as a dependency during plugin installation.\n    DEPENDENCY,\n    // Resolves to a magic value to always bypass runtime validation for a given function.\n    // This is only assignable on runtime validation functions. If it were to be used on a user op validation function,\n    // it would risk burning gas from the account. When used as a hook in any hook location, it is equivalent to not\n    // setting a hook and is therefore disallowed.\n    RUNTIME_VALIDATION_ALWAYS_ALLOW,\n    // Resolves to a magic value to always fail in a hook for a given function.\n    // This is only assignable to pre hooks (pre validation and pre execution). It should not be used on\n    // validation functions themselves, because this is equivalent to leaving the validation functions unset.\n    // It should not be used in post-exec hooks, because if it is known to always revert, that should happen\n    // as early as possible to save gas.\n    PRE_HOOK_ALWAYS_DENY\n}\n\n/// @dev For functions of type `ManifestAssociatedFunctionType.DEPENDENCY`, the MSCA MUST find the plugin address\n/// of the function at `dependencies[dependencyIndex]` during the call to `installPlugin(config)`.\nstruct ManifestFunction {\n    ManifestAssociatedFunctionType functionType;\n    uint8 functionId;\n    uint256 dependencyIndex;\n}\n\nstruct ManifestAssociatedFunction {\n    bytes4 executionSelector;\n    ManifestFunction associatedFunction;\n}\n\nstruct ManifestExecutionHook {\n    bytes4 selector;\n    ManifestFunction preExecHook;\n    ManifestFunction postExecHook;\n}\n\nstruct ManifestExternalCallPermission {\n    address externalAddress;\n    bool permitAnySelector;\n    bytes4[] selectors;\n}\n\nstruct SelectorPermission {\n    bytes4 functionSelector;\n    string permissionDescription;\n}\n\n/// @dev A struct holding fields to describe the plugin in a purely view context. Intended for front end clients.\nstruct PluginMetadata {\n    // A human-readable name of the plugin.\n    string name;\n    // The version of the plugin, following the semantic versioning scheme.\n    string version;\n    // The author field SHOULD be a username representing the identity of the user or organization\n    // that created this plugin.\n    string author;\n    // String descriptions of the relative sensitivity of specific functions. The selectors MUST be selectors for\n    // functions implemented by this plugin.\n    SelectorPermission[] permissionDescriptors;\n}\n\n/// @dev A struct describing how the plugin should be installed on a modular account.\nstruct PluginManifest {\n    // List of ERC-165 interface IDs to add to account to support introspection checks. This MUST NOT include\n    // IPlugin's interface ID.\n    bytes4[] interfaceIds;\n    // If this plugin depends on other plugins' validation functions, the interface IDs of those plugins MUST be\n    // provided here, with its position in the array matching the `dependencyIndex` members of `ManifestFunction`\n    bytes4[] dependencyInterfaceIds;\n    // Execution functions defined in this plugin to be installed on the MSCA.\n    bytes4[] executionFunctions;\n    // Plugin execution functions already installed on the MSCA that this plugin will be able to call.\n    bytes4[] permittedExecutionSelectors;\n    // Boolean to indicate whether the plugin can call any external address.\n    bool permitAnyExternalAddress;\n    // Boolean to indicate whether the plugin needs access to spend native tokens of the account. If false, the\n    // plugin MUST still be able to spend up to the balance that it sends to the account in the same call.\n    bool canSpendNativeToken;\n    // More granular control\n    ManifestExternalCallPermission[] permittedExternalCalls;\n    ManifestAssociatedFunction[] userOpValidationFunctions;\n    ManifestAssociatedFunction[] runtimeValidationFunctions;\n    ManifestAssociatedFunction[] preUserOpValidationHooks;\n    ManifestAssociatedFunction[] preRuntimeValidationHooks;\n    // for executionFunctions\n    ManifestExecutionHook[] executionHooks;\n}\n"},"src/msca/6900/v0.7/interfaces/IPlugin.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport \"../common/PluginManifest.sol\";\nimport \"../common/Structs.sol\";\nimport {PackedUserOperation} from \"@account-abstraction/contracts/interfaces/PackedUserOperation.sol\";\n\n/**\n * @dev Implements https://eips.ethereum.org/EIPS/eip-6900. Plugins must implement this interface to support plugin\n * management and interactions with MSCAs.\n */\ninterface IPlugin {\n    /// @notice Initialize plugin data for the modular account.\n    /// @dev Called by the modular account during `installPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\n    /// modular account.\n    function onInstall(bytes calldata data) external;\n\n    /// @notice Clear plugin data for the modular account.\n    /// @dev Called by the modular account during `uninstallPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular\n    /// account.\n    function onUninstall(bytes calldata data) external;\n\n    /// @notice Run the pre user operation validation hook specified by the `functionId`.\n    /// @dev Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be more\n    /// than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function preUserOpValidationHook(uint8 functionId, PackedUserOperation calldata userOp, bytes32 userOpHash)\n        external\n        returns (uint256);\n\n    /// @notice Run the user operation validationFunction specified by the `functionId`.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function userOpValidationFunction(uint8 functionId, PackedUserOperation calldata userOp, bytes32 userOpHash)\n        external\n        returns (uint256);\n\n    /// @notice Run the pre runtime validation hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be more\n    /// than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function preRuntimeValidationHook(uint8 functionId, address sender, uint256 value, bytes calldata data) external;\n\n    /// @notice Run the runtime validationFunction specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function runtimeValidationFunction(uint8 functionId, address sender, uint256 value, bytes calldata data) external;\n\n    /// @notice Run the pre execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be more\n    /// than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    /// @return context Context to pass to a post execution hook, if present. An empty bytes array MAY be returned.\n    function preExecutionHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        returns (bytes memory context);\n\n    /// @notice Run the post execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be more\n    /// than one.\n    /// @param preExecHookData The context returned by its associated pre execution hook.\n    function postExecutionHook(uint8 functionId, bytes calldata preExecHookData) external;\n\n    /// @notice Describe the contents and intended configuration of the plugin.\n    /// @dev This manifest MUST stay constant over time.\n    /// @return A manifest describing the contents and intended configuration of the plugin.\n    function pluginManifest() external pure returns (PluginManifest memory);\n\n    /// @notice Describe the metadata of the plugin.\n    /// @dev This metadata MUST stay constant over time.\n    /// @return A metadata struct describing the plugin.\n    function pluginMetadata() external pure returns (PluginMetadata memory);\n}\n"},"src/msca/6900/v0.7/libs/FunctionReferenceDLLLib.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {EMPTY_FUNCTION_REFERENCE, SENTINEL_BYTES21} from \"../../../../common/Constants.sol\";\nimport {\n    InvalidFunctionReference, InvalidLimit, ItemAlreadyExists, ItemDoesNotExist\n} from \"../../shared/common/Errors.sol\";\nimport \"../common/Structs.sol\";\nimport {FunctionReferenceLib} from \"./FunctionReferenceLib.sol\";\n\n/**\n * @dev Enumerable & ordered doubly linked list built using mapping(bytes21 => bytes21) for function reference.\n *      Item is expected to be unique.\n */\nlibrary FunctionReferenceDLLLib {\n    using FunctionReferenceLib for FunctionReference;\n    using FunctionReferenceLib for bytes21;\n\n    modifier validFunctionReference(FunctionReference memory fr) {\n        if (fr.pack() <= SENTINEL_BYTES21) {\n            revert InvalidFunctionReference();\n        }\n        _;\n    }\n\n    /**\n     * @dev Check if an item exists or not. O(1).\n     */\n    function contains(Bytes21DLL storage dll, FunctionReference memory fr) internal view returns (bool) {\n        return contains(dll, fr.pack());\n    }\n\n    function contains(Bytes21DLL storage dll, bytes21 item) internal view returns (bool) {\n        return getHeadWithoutUnpack(dll) == item || dll.next[item] != SENTINEL_BYTES21\n            || dll.prev[item] != SENTINEL_BYTES21;\n    }\n\n    /**\n     * @dev Get the count of dll. O(1).\n     */\n    function size(Bytes21DLL storage dll) internal view returns (uint256) {\n        return dll.count;\n    }\n\n    /**\n     * @dev Add an new item which did not exist before. Otherwise the function reverts. O(1).\n     */\n    function append(Bytes21DLL storage dll, FunctionReference memory fr)\n        internal\n        validFunctionReference(fr)\n        returns (bool)\n    {\n        bytes21 item = fr.pack();\n        if (contains(dll, item)) {\n            revert ItemAlreadyExists();\n        }\n        bytes21 prev = getTailWithoutUnpack(dll);\n        bytes21 next = SENTINEL_BYTES21;\n        // prev.next = item\n        dll.next[prev] = item;\n        // item.next = next\n        dll.next[item] = next;\n        // next.prev = item\n        dll.prev[next] = item;\n        // item.prev = prev\n        dll.prev[item] = prev;\n        dll.count++;\n        return true;\n    }\n\n    /**\n     * @dev Remove an already existing item. Otherwise the function reverts. O(1).\n     */\n    function remove(Bytes21DLL storage dll, FunctionReference memory fr)\n        internal\n        validFunctionReference(fr)\n        returns (bool)\n    {\n        bytes21 item = fr.pack();\n        if (!contains(dll, item)) {\n            revert ItemDoesNotExist();\n        }\n        // item.prev.next = item.next\n        dll.next[dll.prev[item]] = dll.next[item];\n        // item.next.prev = item.prev\n        dll.prev[dll.next[item]] = dll.prev[item];\n        delete dll.next[item];\n        delete dll.prev[item];\n        dll.count--;\n        return true;\n    }\n\n    /**\n     * @dev Return paginated bytes21s and next pointer bytes21. O(n).\n     * @param startFR Starting bytes21, inclusive, if start == bytes21(0), this method searches from the head.\n     */\n    function getPaginated(Bytes21DLL storage dll, FunctionReference memory startFR, uint256 limit)\n        internal\n        view\n        returns (FunctionReference[] memory, FunctionReference memory)\n    {\n        if (limit == 0) {\n            revert InvalidLimit();\n        }\n        bytes21 start = startFR.pack();\n        FunctionReference[] memory results = new FunctionReference[](limit);\n        bytes21 current = start;\n        if (start == SENTINEL_BYTES21) {\n            current = getHeadWithoutUnpack(dll);\n        }\n        uint256 count = 0;\n        for (; count < limit && current > SENTINEL_BYTES21; ++count) {\n            results[count] = current.unpack();\n            current = dll.next[current];\n        }\n        assembly (\"memory-safe\") {\n            mstore(results, count)\n        }\n        return (results, current.unpack());\n    }\n\n    /**\n     * @dev Return all the data. O(n).\n     */\n    function getAll(Bytes21DLL storage dll) internal view returns (FunctionReference[] memory results) {\n        uint256 totalCount = size(dll);\n        results = new FunctionReference[](totalCount);\n        uint256 accumulatedCount = 0;\n        FunctionReference memory startFR = EMPTY_FUNCTION_REFERENCE.unpack();\n        for (uint256 i = 0; i < totalCount; ++i) {\n            (FunctionReference[] memory currentResults, FunctionReference memory nextFR) =\n                getPaginated(dll, startFR, 10);\n            for (uint256 j = 0; j < currentResults.length; ++j) {\n                results[accumulatedCount++] = currentResults[j];\n            }\n            if (nextFR.pack() == SENTINEL_BYTES21) {\n                break;\n            }\n            startFR = nextFR;\n        }\n        return results;\n    }\n\n    function getHead(Bytes21DLL storage dll) internal view returns (FunctionReference memory) {\n        return dll.next[SENTINEL_BYTES21].unpack();\n    }\n\n    function getTail(Bytes21DLL storage dll) internal view returns (FunctionReference memory) {\n        return dll.prev[SENTINEL_BYTES21].unpack();\n    }\n\n    function getHeadWithoutUnpack(Bytes21DLL storage dll) private view returns (bytes21) {\n        return dll.next[SENTINEL_BYTES21];\n    }\n\n    function getTailWithoutUnpack(Bytes21DLL storage dll) private view returns (bytes21) {\n        return dll.prev[SENTINEL_BYTES21];\n    }\n}\n"},"src/msca/6900/v0.7/libs/FunctionReferenceLib.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport \"../common/Structs.sol\";\n\nlibrary FunctionReferenceLib {\n    function unpack(bytes21 frBytes) internal pure returns (FunctionReference memory) {\n        return FunctionReference(address(bytes20(frBytes)), uint8(bytes1(frBytes << 160)));\n    }\n\n    function pack(FunctionReference memory functionReference) internal pure returns (bytes21) {\n        return (bytes21(bytes20(functionReference.plugin)) | bytes21(uint168(functionReference.functionId)));\n    }\n}\n"},"src/msca/6900/v0.7/libs/RepeatableFunctionReferenceDLLLib.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {EMPTY_FUNCTION_REFERENCE, SENTINEL_BYTES21} from \"../../../../common/Constants.sol\";\nimport {InvalidFunctionReference, InvalidLimit, ItemDoesNotExist} from \"../../shared/common/Errors.sol\";\nimport \"../common/Structs.sol\";\nimport {FunctionReferenceLib} from \"./FunctionReferenceLib.sol\";\n\n/**\n * @dev Enumerable & ordered doubly linked list built using RepeatableBytes21DLL.\n *      Item is expected to be have a counter that tracks repeated number.\n */\nlibrary RepeatableFunctionReferenceDLLLib {\n    using FunctionReferenceLib for FunctionReference;\n    using FunctionReferenceLib for bytes21;\n\n    modifier validFunctionReference(FunctionReference memory fr) {\n        if (fr.pack() <= SENTINEL_BYTES21) {\n            revert InvalidFunctionReference();\n        }\n        _;\n    }\n\n    /**\n     * @dev Check the counter of an item. O(1).\n     * @return the counter\n     */\n    function getRepeatedCount(RepeatableBytes21DLL storage dll, FunctionReference memory fr)\n        internal\n        view\n        returns (uint256)\n    {\n        bytes21 item = fr.pack();\n        if (item == SENTINEL_BYTES21) {\n            return 1;\n        }\n        return dll.counter[item];\n    }\n\n    /**\n     * @dev Get the total items of dll. O(1).\n     */\n    function getTotalItems(RepeatableBytes21DLL storage dll) internal view returns (uint256) {\n        return dll.totalItems;\n    }\n\n    /**\n     * @dev Get the unique items of dll. O(1).\n     */\n    function getUniqueItems(RepeatableBytes21DLL storage dll) internal view returns (uint256) {\n        return dll.uniqueItems;\n    }\n\n    /**\n     * @dev Add an new item. O(1).\n     */\n    function append(RepeatableBytes21DLL storage dll, FunctionReference memory fr)\n        internal\n        validFunctionReference(fr)\n        returns (uint256)\n    {\n        bytes21 item = fr.pack();\n        uint256 currentCount = getRepeatedCount(dll, fr);\n        if (currentCount == 0) {\n            bytes21 prev = getTailWithoutUnpack(dll);\n            bytes21 next = SENTINEL_BYTES21;\n            // prev.next = item\n            dll.next[prev] = item;\n            // item.next = next\n            dll.next[item] = next;\n            // next.prev = item\n            dll.prev[next] = item;\n            // item.prev = prev\n            dll.prev[item] = prev;\n            dll.uniqueItems++;\n        }\n        dll.counter[item]++;\n        dll.totalItems++;\n        return dll.counter[item];\n    }\n\n    /**\n     * @dev Remove or decrease the counter of already existing item. Otherwise the function reverts. O(1).\n     */\n    function remove(RepeatableBytes21DLL storage dll, FunctionReference memory fr)\n        internal\n        validFunctionReference(fr)\n        returns (uint256)\n    {\n        uint256 currentCount = getRepeatedCount(dll, fr);\n        if (currentCount == 0) {\n            revert ItemDoesNotExist();\n        }\n        bytes21 item = fr.pack();\n        if (currentCount == 1) {\n            // delete the item\n            // item.prev.next = item.next\n            dll.next[dll.prev[item]] = dll.next[item];\n            // item.next.prev = item.prev\n            dll.prev[dll.next[item]] = dll.prev[item];\n            delete dll.next[item];\n            delete dll.prev[item];\n            delete dll.counter[item];\n            dll.uniqueItems--;\n        } else {\n            dll.counter[item]--;\n        }\n        dll.totalItems--;\n        return dll.counter[item];\n    }\n\n    /**\n     * @dev Remove all copies of already existing items. O(1).\n     */\n    function removeAllRepeated(RepeatableBytes21DLL storage dll, FunctionReference memory fr)\n        internal\n        validFunctionReference(fr)\n        returns (bool)\n    {\n        uint256 currentCount = getRepeatedCount(dll, fr);\n        if (currentCount == 0) {\n            revert ItemDoesNotExist();\n        }\n        bytes21 item = fr.pack();\n        // item.prev.next = item.next\n        dll.next[dll.prev[item]] = dll.next[item];\n        // item.next.prev = item.prev\n        dll.prev[dll.next[item]] = dll.prev[item];\n        delete dll.next[item];\n        delete dll.prev[item];\n        delete dll.counter[item];\n        dll.uniqueItems--;\n        dll.totalItems -= currentCount;\n        return true;\n    }\n\n    /**\n     * @dev Return paginated results and next pointer without counter information. O(n).\n     *      In order to get counter information (which our current use case does not need), please call\n     * getRepeatedCount.\n     * @param startFR Starting item, inclusive, if start == bytes21(0), this method searches from the head.\n     */\n    function getPaginated(RepeatableBytes21DLL storage dll, FunctionReference memory startFR, uint256 limit)\n        internal\n        view\n        returns (FunctionReference[] memory, FunctionReference memory)\n    {\n        if (limit == 0) {\n            revert InvalidLimit();\n        }\n        bytes21 start = startFR.pack();\n        FunctionReference[] memory results = new FunctionReference[](limit);\n        bytes21 current = start;\n        if (start == SENTINEL_BYTES21) {\n            current = getHeadWithoutUnpack(dll);\n        }\n        uint256 count = 0;\n        for (; count < limit && current > SENTINEL_BYTES21; ++count) {\n            results[count] = current.unpack();\n            current = dll.next[current];\n        }\n        assembly (\"memory-safe\") {\n            mstore(results, count)\n        }\n        return (results, current.unpack());\n    }\n\n    /**\n     * @dev Return all the unique items without counter information. O(n).\n     *      In order to get counter information (which our current use case does not need), please call\n     * getRepeatedCount.\n     */\n    function getAll(RepeatableBytes21DLL storage dll) internal view returns (FunctionReference[] memory results) {\n        uint256 totalUniqueCount = getUniqueItems(dll);\n        results = new FunctionReference[](totalUniqueCount);\n        uint256 accumulatedCount = 0;\n        FunctionReference memory startFR = EMPTY_FUNCTION_REFERENCE.unpack();\n        for (uint256 i = 0; i < totalUniqueCount; ++i) {\n            (FunctionReference[] memory currentResults, FunctionReference memory nextFR) =\n                getPaginated(dll, startFR, 10);\n            for (uint256 j = 0; j < currentResults.length; ++j) {\n                results[accumulatedCount++] = currentResults[j];\n            }\n            if (nextFR.pack() == SENTINEL_BYTES21) {\n                break;\n            }\n            startFR = nextFR;\n        }\n        return results;\n    }\n\n    function getHead(RepeatableBytes21DLL storage dll) internal view returns (FunctionReference memory) {\n        return dll.next[SENTINEL_BYTES21].unpack();\n    }\n\n    function getTail(RepeatableBytes21DLL storage dll) internal view returns (FunctionReference memory) {\n        return dll.prev[SENTINEL_BYTES21].unpack();\n    }\n\n    function getHeadWithoutUnpack(RepeatableBytes21DLL storage dll) private view returns (bytes21) {\n        return dll.next[SENTINEL_BYTES21];\n    }\n\n    function getTailWithoutUnpack(RepeatableBytes21DLL storage dll) private view returns (bytes21) {\n        return dll.prev[SENTINEL_BYTES21];\n    }\n}\n"},"src/msca/6900/v0.7/libs/SelectorRegistryLib.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {IAccountLoupe} from \"../interfaces/IAccountLoupe.sol\";\n\nimport {IPlugin} from \"../interfaces/IPlugin.sol\";\nimport {IPluginExecutor} from \"../interfaces/IPluginExecutor.sol\";\nimport {IPluginManager} from \"../interfaces/IPluginManager.sol\";\nimport {IStandardExecutor} from \"../interfaces/IStandardExecutor.sol\";\nimport {IAggregator} from \"@account-abstraction/contracts/interfaces/IAggregator.sol\";\nimport {IPaymaster} from \"@account-abstraction/contracts/interfaces/IPaymaster.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nlibrary SelectorRegistryLib {\n    bytes4 internal constant INITIALIZE_UPGRADABLE_MSCA =\n        bytes4(keccak256(\"initializeUpgradableMSCA(address[],bytes32[],bytes[])\"));\n    bytes4 internal constant INITIALIZE_SINGLE_OWNER_MSCA = bytes4(keccak256(\"initializeSingleOwnerMSCA(address)\"));\n    bytes4 internal constant TRANSFER_NATIVE_OWNERSHIP = bytes4(keccak256(\"transferNativeOwnership(address)\"));\n    bytes4 internal constant RENOUNCE_NATIVE_OWNERSHIP = bytes4(keccak256(\"renounceNativeOwnership()\"));\n    bytes4 internal constant GET_NATIVE_OWNER = bytes4(keccak256(\"getNativeOwner()\"));\n    bytes4 internal constant VALIDATE_USER_OP = bytes4(keccak256(\"validateUserOp(UserOperation,bytes32,uint256)\"));\n    bytes4 internal constant GET_ENTRYPOINT = bytes4(keccak256(\"getEntryPoint()\"));\n    bytes4 internal constant GET_NONCE = bytes4(keccak256(\"getNonce()\"));\n\n    /**\n     * @dev Check if the selector is for native function.\n     * @param selector the function selector.\n     */\n    function _isNativeFunctionSelector(bytes4 selector) internal pure returns (bool) {\n        return selector == IStandardExecutor.execute.selector || selector == IStandardExecutor.executeBatch.selector\n            || selector == IPluginManager.installPlugin.selector || selector == IPluginManager.uninstallPlugin.selector\n            || selector == UUPSUpgradeable.upgradeToAndCall.selector || selector == UUPSUpgradeable.proxiableUUID.selector\n        // check against IERC165 methods\n        || selector == IERC165.supportsInterface.selector\n        // check against IPluginExecutor methods\n        || selector == IPluginExecutor.executeFromPlugin.selector\n            || selector == IPluginExecutor.executeFromPluginExternal.selector\n        // check against IAccountLoupe methods\n        || selector == IAccountLoupe.getExecutionFunctionConfig.selector\n            || selector == IAccountLoupe.getExecutionHooks.selector\n            || selector == IAccountLoupe.getPreValidationHooks.selector\n            || selector == IAccountLoupe.getInstalledPlugins.selector || selector == VALIDATE_USER_OP\n            || selector == GET_ENTRYPOINT || selector == GET_NONCE || selector == INITIALIZE_UPGRADABLE_MSCA\n            || selector == INITIALIZE_SINGLE_OWNER_MSCA || selector == TRANSFER_NATIVE_OWNERSHIP\n            || selector == RENOUNCE_NATIVE_OWNERSHIP || selector == GET_NATIVE_OWNER;\n    }\n\n    function _isErc4337FunctionSelector(bytes4 selector) internal pure returns (bool) {\n        return selector == IAggregator.validateSignatures.selector\n            || selector == IAggregator.validateUserOpSignature.selector\n            || selector == IAggregator.aggregateSignatures.selector\n            || selector == IPaymaster.validatePaymasterUserOp.selector || selector == IPaymaster.postOp.selector;\n    }\n\n    function _isIPluginFunctionSelector(bytes4 selector) internal pure returns (bool) {\n        return selector == IPlugin.onInstall.selector || selector == IPlugin.onUninstall.selector\n            || selector == IPlugin.preUserOpValidationHook.selector || selector == IPlugin.userOpValidationFunction.selector\n            || selector == IPlugin.preRuntimeValidationHook.selector\n            || selector == IPlugin.runtimeValidationFunction.selector || selector == IPlugin.preExecutionHook.selector\n            || selector == IPlugin.postExecutionHook.selector || selector == IPlugin.pluginManifest.selector\n            || selector == IPlugin.pluginMetadata.selector;\n    }\n}\n"},"src/msca/6900/v0.7/libs/WalletStorageV1Lib.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {AddressDLL} from \"../../shared/common/Structs.sol\";\nimport \"../common/Structs.sol\";\n\n/// @dev The same storage will be used for v1.x.y of MSCAs.\nlibrary WalletStorageV1Lib {\n    // keccak256 hash of \"circle.msca.v1.storage\" subtracted by 1\n    bytes32 constant WALLET_STORAGE_SLOT = 0xc6a0cc20c824c4eecc4b0fbb7fb297d07492a7bd12c83d4fa4d27b4249f9bfc8;\n\n    struct Layout {\n        // installed plugin addresses for quick query\n        AddressDLL installedPlugins;\n        // installed plugin details such as manifest, dependencies\n        mapping(address => PluginDetail) pluginDetails;\n        // permissions for executeFromPlugin into another plugin\n        // callingPluginAddress => callingExecutionSelector => permittedOrNot\n        mapping(address => mapping(bytes4 => bool)) permittedPluginCalls;\n        // permissions for executeFromPluginExternal into external contract\n        // callingPluginAddress => targetContractAddress => permission\n        mapping(address => mapping(address => PermittedExternalCall)) permittedExternalCalls;\n        // list of ERC-165 interfaceIds to add to account to support introspection checks\n        // interfaceId => counter\n        mapping(bytes4 => uint256) supportedInterfaces;\n        // find plugin or native function execution detail by selector\n        mapping(bytes4 => ExecutionDetail) executionDetails;\n        /// indicates that the contract has been initialized\n        uint8 initialized;\n        /// indicates that the contract is in the process of being initialized\n        bool initializing;\n        // optional fields\n        address owner;\n    }\n\n    /**\n     * @dev Function to read structured wallet storage.\n     */\n    function getLayout() internal pure returns (Layout storage walletStorage) {\n        assembly (\"memory-safe\") {\n            walletStorage.slot := WALLET_STORAGE_SLOT\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"},"src/msca/6900/shared/libs/ValidationDataLib.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {ValidationData} from \"../common/Structs.sol\";\n\nlibrary ValidationDataLib {\n    error WrongTimeBounds();\n\n    /**\n     * @dev Intercept the time bounds [validAfter, validUntil], as well as signature validation result (favoring the\n     * failure).\n     */\n    function _intersectValidationData(ValidationData memory a, uint256 uintb)\n        internal\n        pure\n        returns (ValidationData memory validationData)\n    {\n        ValidationData memory b = _unpackValidationData(uintb);\n        if (a.validAfter > a.validUntil) {\n            revert WrongTimeBounds();\n        }\n        if (b.validAfter > b.validUntil) {\n            revert WrongTimeBounds();\n        }\n        // 0 is successful validation\n        if (a.authorizer == address(0)) {\n            validationData.authorizer = b.authorizer;\n        } else {\n            validationData.authorizer = a.authorizer;\n        }\n        if (a.validAfter > b.validAfter) {\n            validationData.validAfter = a.validAfter;\n        } else {\n            validationData.validAfter = b.validAfter;\n        }\n        if (a.validUntil < b.validUntil) {\n            validationData.validUntil = a.validUntil;\n        } else {\n            validationData.validUntil = b.validUntil;\n        }\n        // make sure the caller (e.g. entryPoint) reverts\n        if (validationData.validAfter >= validationData.validUntil) {\n            validationData.authorizer = address(1);\n        }\n        return validationData;\n    }\n\n    /**\n     * @dev Unpack into the deserialized packed format from validAfter | validUntil | authorizer.\n     */\n    function _unpackValidationData(uint256 validationDataInt)\n        internal\n        pure\n        returns (ValidationData memory validationData)\n    {\n        address authorizer = address(uint160(validationDataInt));\n        uint48 validUntil = uint48(validationDataInt >> 160);\n        if (validUntil == 0) {\n            validUntil = type(uint48).max;\n        }\n        uint48 validAfter = uint48(validationDataInt >> (48 + 160));\n        return ValidationData(validAfter, validUntil, authorizer);\n    }\n\n    function _packValidationData(ValidationData memory data) internal pure returns (uint256) {\n        return uint160(data.authorizer) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\n    }\n}\n"},"src/msca/6900/v0.7/interfaces/IAccountLoupe.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport \"../common/Structs.sol\";\n\n/**\n * @dev Implements https://eips.ethereum.org/EIPS/eip-6900. MSCAs may implement this interface to support visibility in\n * plugin configurations on-chain.\n */\ninterface IAccountLoupe {\n    /// @notice Get the validation functions and plugin address for a selector.\n    /// @dev If the selector is a native function, the plugin address will be the address of the account.\n    /// @param selector The selector to get the configuration for.\n    /// @return The configuration for this selector.\n    function getExecutionFunctionConfig(bytes4 selector) external view returns (ExecutionFunctionConfig memory);\n\n    /// @notice Get the pre and post execution hooks for a selector.\n    /// @param selector The selector to get the hooks for.\n    /// @return The pre and post execution hooks for this selector.\n    function getExecutionHooks(bytes4 selector) external view returns (ExecutionHooks[] memory);\n\n    /// @notice Get the pre user op and runtime validation hooks associated with a selector.\n    /// @param selector The selector to get the hooks for.\n    /// @return preUserOpValidationHooks The pre user op validation hooks for this selector.\n    /// @return preRuntimeValidationHooks The pre runtime validation hooks for this selector.\n    function getPreValidationHooks(bytes4 selector)\n        external\n        view\n        returns (FunctionReference[] memory, FunctionReference[] memory);\n\n    /// @notice Get an array of all installed plugins.\n    /// @return pluginAddresses The addresses of all installed plugins.\n    function getInstalledPlugins() external view returns (address[] memory);\n}\n"},"src/msca/6900/v0.7/interfaces/IPluginExecutor.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\n/**\n * @dev Implements https://eips.ethereum.org/EIPS/eip-6900. MSCAs must implement this interface to support execution\n * from plugins.\n */\ninterface IPluginExecutor {\n    /// @notice Execute a call from a plugin through the account.\n    /// @dev Permissions must be granted to the calling plugin for the call to go through.\n    /// @param data The calldata to send to the account.\n    function executeFromPlugin(bytes calldata data) external payable returns (bytes memory);\n\n    /// @notice Execute a call from a plugin to a non-plugin address.\n    /// @dev If the target is a plugin, the call SHOULD revert. Permissions must be granted to the calling plugin\n    /// for the call to go through.\n    /// @param target The address to be called.\n    /// @param value The value to send with the call.\n    /// @param data The calldata to send to the target.\n    /// @return The return data from the call.\n    function executeFromPluginExternal(address target, uint256 value, bytes calldata data)\n        external\n        payable\n        returns (bytes memory);\n}\n"},"src/msca/6900/v0.7/interfaces/IPluginManager.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport \"../common/Structs.sol\";\n\n/**\n * @dev Implements https://eips.ethereum.org/EIPS/eip-6900. MSCAs must implement this interface to support installing\n * and uninstalling plugins.\n */\ninterface IPluginManager {\n    event PluginInstalled(address indexed plugin, bytes32 manifestHash, FunctionReference[] dependencies);\n    event PluginUninstalled(address indexed plugin, bool indexed onUninstallSucceeded);\n\n    /// @notice Install a plugin to the modular account.\n    /// @param plugin The plugin to install.\n    /// @param manifestHash The hash of the plugin manifest.\n    /// @param pluginInstallData Optional data to be decoded and used by the plugin to setup initial plugin data\n    /// for the modular account.\n    /// @param dependencies The dependencies of the plugin, as described in the manifest. Each FunctionReference\n    /// MUST be composed of an installed plugin's address and a function ID of its validation function.\n    function installPlugin(\n        address plugin,\n        bytes32 manifestHash,\n        bytes calldata pluginInstallData,\n        FunctionReference[] calldata dependencies\n    ) external;\n\n    /// @notice Uninstall a plugin from the modular account.\n    /// @param plugin The plugin to uninstall.\n    /// @param config An optional, implementation-specific field that accounts may use to ensure consistency\n    /// guarantees.\n    /// @param pluginUninstallData Optional data to be decoded and used by the plugin to clear plugin data for the\n    /// modular account.\n    function uninstallPlugin(address plugin, bytes calldata config, bytes calldata pluginUninstallData) external;\n}\n"},"src/msca/6900/v0.7/interfaces/IStandardExecutor.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport \"../common/Structs.sol\";\n\n/**\n * @dev Implements https://eips.ethereum.org/EIPS/eip-6900. MSCAs must implement this interface to support open-ended\n * execution.\n */\ninterface IStandardExecutor {\n    /// @notice Standard execute method.\n    /// @dev If the target is a plugin, the call SHOULD revert.\n    /// @param target The target address for the account to call.\n    /// @param value The value to send with the call.\n    /// @param data The calldata for the call.\n    /// @return The return data from the call.\n    function execute(address target, uint256 value, bytes calldata data) external payable returns (bytes memory);\n\n    /// @notice Standard executeBatch method.\n    /// @dev If the target is a plugin, the call SHOULD revert. If any of the calls revert, the entire batch MUST\n    /// revert.\n    /// @param calls The array of calls.\n    /// @return An array containing the return data from the calls.\n    function executeBatch(Call[] calldata calls) external payable returns (bytes[] memory);\n}\n"},"src/msca/6900/v0.7/libs/ExecutionHookLib.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {EMPTY_FUNCTION_REFERENCE, SENTINEL_BYTES21} from \"../../../../common/Constants.sol\";\nimport {InvalidValidationFunctionId} from \"../../shared/common/Errors.sol\";\nimport {\n    PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE,\n    RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE\n} from \"../common/Constants.sol\";\nimport \"../common/Structs.sol\";\nimport {IPlugin} from \"../interfaces/IPlugin.sol\";\nimport {FunctionReferenceLib} from \"./FunctionReferenceLib.sol\";\nimport {RepeatableFunctionReferenceDLLLib} from \"./RepeatableFunctionReferenceDLLLib.sol\";\n\n/**\n * @dev Process pre or post execution hooks.\n */\nlibrary ExecutionHookLib {\n    using RepeatableFunctionReferenceDLLLib for RepeatableBytes21DLL;\n    using FunctionReferenceLib for FunctionReference;\n    using FunctionReferenceLib for bytes21;\n\n    error PreExecHookFailed(address plugin, uint8 functionId, bytes revertReason);\n    error PostExecHookFailed(address plugin, uint8 functionId, bytes revertReason);\n\n    // avoid stack too deep\n    struct SetPostExecHooksFromPreHooksParam {\n        uint256 totalPostExecHooksToRunCount;\n        PostExecHookToRun[] postExecHooksToRun;\n    }\n\n    function _processPreExecHooks(HookGroup storage hookGroup, bytes calldata data)\n        internal\n        returns (PostExecHookToRun[] memory postExecHooksToRun)\n    {\n        uint256 postOnlyHooksCount = hookGroup.postOnlyHooks.getUniqueItems();\n        // hooks have three categories a. preOnlyHook b. preToPostHook c. postOnlyHook\n        // 1. add repeated preHook into postHook 2. add postOnlyHooks\n        uint256 maxPostHooksCount = postOnlyHooksCount + hookGroup.preHooks.getTotalItems();\n        uint256 totalPostExecHooksToRunCount = 0;\n        postExecHooksToRun = new PostExecHookToRun[](maxPostHooksCount);\n        // copy postOnlyHooks into result first\n        FunctionReference memory startHook = EMPTY_FUNCTION_REFERENCE.unpack();\n        for (uint256 i = 0; i < postOnlyHooksCount; ++i) {\n            (FunctionReference[] memory resultPostOnlyHooks, FunctionReference memory nextHook) =\n                hookGroup.postOnlyHooks.getPaginated(startHook, 10);\n            for (uint256 j = 0; j < resultPostOnlyHooks.length; ++j) {\n                postExecHooksToRun[totalPostExecHooksToRunCount++].postExecHook = resultPostOnlyHooks[j];\n            }\n            if (nextHook.pack() == SENTINEL_BYTES21) {\n                break;\n            }\n            startHook = nextHook;\n        }\n        // then run the preHooks and copy associated postHooks\n        SetPostExecHooksFromPreHooksParam memory input;\n        input.totalPostExecHooksToRunCount = totalPostExecHooksToRunCount;\n        input.postExecHooksToRun = postExecHooksToRun;\n        (totalPostExecHooksToRunCount, postExecHooksToRun) = _setPostExecHooksFromPreHooks(hookGroup, data, input);\n        assembly (\"memory-safe\") {\n            mstore(postExecHooksToRun, totalPostExecHooksToRunCount)\n        }\n    }\n\n    function _processPreExecHook(FunctionReference memory preExecHook, bytes calldata data)\n        internal\n        returns (bytes memory preExecHookReturnData)\n    {\n        try IPlugin(preExecHook.plugin).preExecutionHook(preExecHook.functionId, msg.sender, msg.value, data) returns (\n            bytes memory returnData\n        ) {\n            preExecHookReturnData = returnData;\n        } catch (bytes memory revertReason) {\n            revert PreExecHookFailed(preExecHook.plugin, preExecHook.functionId, revertReason);\n        }\n        return preExecHookReturnData;\n    }\n\n    function _processPostExecHooks(PostExecHookToRun[] memory postExecHooksToRun) internal {\n        uint256 length = postExecHooksToRun.length;\n        for (uint256 i = 0; i < length; ++i) {\n            FunctionReference memory postExecHook = postExecHooksToRun[i].postExecHook;\n            try IPlugin(postExecHook.plugin).postExecutionHook(\n                postExecHook.functionId, postExecHooksToRun[i].preExecHookReturnData\n            ) {} catch (bytes memory revertReason) {\n                revert PostExecHookFailed(postExecHook.plugin, postExecHook.functionId, revertReason);\n            }\n        }\n    }\n\n    function _getExecutionHooks(HookGroup storage hookGroup) internal view returns (ExecutionHooks[] memory hooks) {\n        uint256 preHooksCount = hookGroup.preHooks.getUniqueItems();\n        uint256 postOnlyHooksCount = hookGroup.postOnlyHooks.getUniqueItems();\n        // hooks have three categories a. preOnlyHook b. preToPostHook c. postOnlyHook\n        // 1. add repeated preHook into postHook 2. add postOnlyHooks\n        uint256 maxExecHooksCount = postOnlyHooksCount + hookGroup.preHooks.getTotalItems();\n        uint256 totalExecHooksCount = 0;\n        hooks = new ExecutionHooks[](maxExecHooksCount);\n        // copy postOnlyHooks into result first\n        FunctionReference memory startHook = EMPTY_FUNCTION_REFERENCE.unpack();\n        for (uint256 i = 0; i < postOnlyHooksCount; ++i) {\n            (FunctionReference[] memory resultPostOnlyHooks, FunctionReference memory nextHook) =\n                hookGroup.postOnlyHooks.getPaginated(startHook, 10);\n            for (uint256 j = 0; j < resultPostOnlyHooks.length; ++j) {\n                hooks[totalExecHooksCount++].postExecHook = resultPostOnlyHooks[j];\n            }\n            if (nextHook.pack() == SENTINEL_BYTES21) {\n                break;\n            }\n            startHook = nextHook;\n        }\n        // then copy preOnlyHooks or preToPostHooks\n        startHook = EMPTY_FUNCTION_REFERENCE.unpack();\n        for (uint256 i = 0; i < preHooksCount; ++i) {\n            (FunctionReference[] memory resultPreExecHooks, FunctionReference memory nextHook) =\n                hookGroup.preHooks.getPaginated(startHook, 10);\n            for (uint256 j = 0; j < resultPreExecHooks.length; ++j) {\n                // if any revert, the outer call MUST revert\n                bytes21 packedPreExecHook = resultPreExecHooks[j].pack();\n                // getAll can handle 1000+ hooks\n                FunctionReference[] memory preToPostHooks = hookGroup.preToPostHooks[packedPreExecHook].getAll();\n                if (preToPostHooks.length > 0) {\n                    for (uint256 k = 0; k < preToPostHooks.length; ++k) {\n                        hooks[totalExecHooksCount].preExecHook = resultPreExecHooks[j];\n                        hooks[totalExecHooksCount].postExecHook = preToPostHooks[k];\n                        totalExecHooksCount++;\n                    }\n                } else {\n                    // no associated postHook\n                    hooks[totalExecHooksCount++].preExecHook = resultPreExecHooks[j];\n                }\n            }\n            if (nextHook.pack() == SENTINEL_BYTES21) {\n                break;\n            }\n            startHook = nextHook;\n        }\n        assembly (\"memory-safe\") {\n            mstore(hooks, totalExecHooksCount)\n        }\n        return hooks;\n    }\n\n    /// @dev The caller would expect both input.totalPostExecHooksToRunCount and input.postExecHooksToRun to be assigned\n    /// back to original values.\n    function _setPostExecHooksFromPreHooks(\n        HookGroup storage hookGroup,\n        bytes calldata data,\n        SetPostExecHooksFromPreHooksParam memory input\n    ) internal returns (uint256, PostExecHookToRun[] memory) {\n        FunctionReference memory startHook = EMPTY_FUNCTION_REFERENCE.unpack();\n        uint256 preHooksCount = hookGroup.preHooks.getUniqueItems();\n        for (uint256 i = 0; i < preHooksCount; ++i) {\n            (FunctionReference[] memory resultPreExecHooks, FunctionReference memory nextHook) =\n                hookGroup.preHooks.getPaginated(startHook, 10);\n            for (uint256 j = 0; j < resultPreExecHooks.length; ++j) {\n                // if any revert, the outer call MUST revert\n                bytes21 packedPreExecHook = resultPreExecHooks[j].pack();\n                if (\n                    packedPreExecHook == EMPTY_FUNCTION_REFERENCE\n                        || packedPreExecHook == RUNTIME_VALIDATION_ALWAYS_ALLOW_FUNCTION_REFERENCE\n                        || packedPreExecHook == PRE_HOOK_ALWAYS_DENY_FUNCTION_REFERENCE\n                ) {\n                    revert InvalidValidationFunctionId(resultPreExecHooks[j].functionId);\n                }\n                // getAll can handle 1000+ hooks\n                // run duplicated (if any) preHooks only once\n                bytes memory preExecHookReturnData = _processPreExecHook(resultPreExecHooks[j], data);\n                FunctionReference[] memory preToPostHooks = hookGroup.preToPostHooks[packedPreExecHook].getAll();\n                if (preToPostHooks.length > 0) {\n                    for (uint256 k = 0; k < preToPostHooks.length; ++k) {\n                        input.postExecHooksToRun[input.totalPostExecHooksToRunCount].postExecHook = preToPostHooks[k];\n                        input.postExecHooksToRun[input.totalPostExecHooksToRunCount].preExecHookReturnData =\n                            preExecHookReturnData;\n                        input.totalPostExecHooksToRunCount++;\n                    }\n                }\n            }\n            if (nextHook.pack() == SENTINEL_BYTES21) {\n                break;\n            }\n            startHook = nextHook;\n        }\n        return (input.totalPostExecHooksToRunCount, input.postExecHooksToRun);\n    }\n}\n"},"src/msca/6900/v0.7/managers/PluginExecutor.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {ExecutionUtils} from \"../../../../utils/ExecutionUtils.sol\";\nimport {InvalidExecutionFunction, NotFoundSelector} from \"../../shared/common/Errors.sol\";\nimport \"../common/Structs.sol\";\nimport {IPlugin} from \"../interfaces/IPlugin.sol\";\nimport {IPluginExecutor} from \"../interfaces/IPluginExecutor.sol\";\nimport {ExecutionHookLib} from \"../libs/ExecutionHookLib.sol\";\nimport {WalletStorageV1Lib} from \"../libs/WalletStorageV1Lib.sol\";\nimport {ERC165Checker} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\n/**\n * @dev Default implementation of https://eips.ethereum.org/EIPS/eip-6900. MSCAs must implement this interface to\n * support execution from plugins.\n *      https://eips.ethereum.org/assets/eip-6900/Plugin_Execution_Flow.svg\n */\nlibrary PluginExecutor {\n    using ExecutionHookLib for HookGroup;\n    using ExecutionHookLib for PostExecHookToRun[];\n    using ExecutionUtils for address;\n\n    error ExecuteFromPluginToExternalNotPermitted();\n    error ExecFromPluginToSelectorNotPermitted(address plugin, bytes4 selector);\n    error NativeTokenSpendingNotPermitted(address plugin);\n\n    /// @dev Refer to IPluginExecutor\n    function executeFromPlugin(bytes calldata data) internal returns (bytes memory) {\n        if (data.length < 4) {\n            revert NotFoundSelector();\n        }\n        bytes4 selector = bytes4(data[0:4]);\n        if (selector == bytes4(0)) {\n            revert NotFoundSelector();\n        }\n        address callingPlugin = msg.sender;\n        WalletStorageV1Lib.Layout storage walletStorage = WalletStorageV1Lib.getLayout();\n        // permission check\n        if (!walletStorage.permittedPluginCalls[callingPlugin][selector]) {\n            revert ExecFromPluginToSelectorNotPermitted(callingPlugin, selector);\n        }\n        // this function call emulates a call to the fallback that routes calls into another plugin;\n        // we use inner data here instead of the entire msg.data that includes the complete calldata of\n        // executeFromPlugin\n        ExecutionDetail storage executionDetail = walletStorage.executionDetails[selector];\n        if (executionDetail.plugin == address(0)) {\n            revert InvalidExecutionFunction(selector);\n        }\n        // pre execution hooks\n        PostExecHookToRun[] memory postExecHooks = executionDetail.executionHooks._processPreExecHooks(data);\n        // permitted to call the other plugin\n        bytes memory returnData = executionDetail.plugin.callWithReturnDataOrRevert(0, data);\n        // post execution hooks\n        postExecHooks._processPostExecHooks();\n        return returnData;\n    }\n\n    /// @dev Refer to IPluginExecutor\n    function executeFromPluginToExternal(bytes calldata data, address target, uint256 value)\n        internal\n        returns (bytes memory)\n    {\n        if (target == address(this) || ERC165Checker.supportsInterface(target, type(IPlugin).interfaceId)) {\n            revert ExecuteFromPluginToExternalNotPermitted();\n        }\n        WalletStorageV1Lib.Layout storage walletStorage = WalletStorageV1Lib.getLayout();\n        address callingPlugin = msg.sender;\n        // revert if the plugin can't cover the value and is not permitted to spend MSCA's native token\n        if (value > 0 && value > msg.value && !walletStorage.pluginDetails[callingPlugin].canSpendNativeToken) {\n            revert NativeTokenSpendingNotPermitted(callingPlugin);\n        }\n        PermittedExternalCall storage permittedExternalCall =\n            walletStorage.permittedExternalCalls[callingPlugin][target];\n        // permission check\n        // addressPermitted can only be true if anyExternalAddressPermitted is false\n        bool targetContractCallPermitted;\n        // external call might not have function selector\n        bytes4 selector = bytes4(data);\n        if (permittedExternalCall.addressPermitted) {\n            targetContractCallPermitted =\n                permittedExternalCall.anySelector || permittedExternalCall.selectors[selector] || data.length == 0;\n        } else {\n            // also need to check the default permission in plugin detail\n            targetContractCallPermitted = walletStorage.pluginDetails[callingPlugin].anyExternalAddressPermitted;\n        }\n        if (!targetContractCallPermitted) {\n            revert ExecFromPluginToSelectorNotPermitted(callingPlugin, selector);\n        }\n        // we use msg.data here so the complete calldata of current function call executeFromPluginToExternalContract\n        // can be passed\n        // pre executeFromPluginToExternalContract hooks\n        // process any pre exec hooks for IPluginExecutor.executeFromPluginExternal.selector during runtime\n        PostExecHookToRun[] memory postExecHooks = walletStorage.executionDetails[IPluginExecutor\n            .executeFromPluginExternal\n            .selector].executionHooks._processPreExecHooks(msg.data);\n        // call externally\n        bytes memory returnData = target.callWithReturnDataOrRevert(value, data);\n        // post executeFromPluginToExternalContract hooks\n        postExecHooks._processPostExecHooks();\n        return returnData;\n    }\n}\n"},"src/msca/6900/v0.7/managers/StandardExecutor.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {ExecutionUtils} from \"../../../../utils/ExecutionUtils.sol\";\nimport \"../common/Structs.sol\";\nimport {IPlugin} from \"../interfaces/IPlugin.sol\";\nimport {ERC165Checker} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\n/**\n * @dev Default implementation of https://eips.ethereum.org/EIPS/eip-6900. MSCAs must implement this interface to\n * support open-ended execution.\n */\nlibrary StandardExecutor {\n    using ExecutionUtils for address;\n\n    error TargetIsPlugin(address plugin);\n\n    /// @dev Refer to IStandardExecutor\n    function execute(address target, uint256 value, bytes calldata data) internal returns (bytes memory returnData) {\n        // reverts if the target is a plugin because modular account should be calling plugin via execution functions\n        // defined in IPluginExecutor\n        if (ERC165Checker.supportsInterface(target, type(IPlugin).interfaceId)) {\n            revert TargetIsPlugin(target);\n        }\n        return target.callWithReturnDataOrRevert(value, data);\n    }\n\n    /// @dev Refer to IStandardExecutor\n    function executeBatch(Call[] calldata calls) internal returns (bytes[] memory returnData) {\n        returnData = new bytes[](calls.length);\n        for (uint256 i = 0; i < calls.length; ++i) {\n            if (ERC165Checker.supportsInterface(calls[i].target, type(IPlugin).interfaceId)) {\n                revert TargetIsPlugin(calls[i].target);\n            }\n            returnData[i] = calls[i].target.callWithReturnDataOrRevert(calls[i].value, calls[i].data);\n        }\n        return returnData;\n    }\n}\n"},"src/msca/6900/v0.7/account/WalletStorageInitializable.sol":{"content":"/*\n * Copyright 2024 Circle Internet Group, Inc. All rights reserved.\n\n * SPDX-License-Identifier: GPL-3.0-or-later\n\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.24;\n\nimport {WalletStorageV1Lib} from \"../libs/WalletStorageV1Lib.sol\";\n\n/// @notice Forked from OpenZeppelin (proxy/utils/Initializable.sol) with wallet storage access.\n///         Reinitialization is removed.\n///         For V1 MSCA.\nabstract contract WalletStorageInitializable {\n    /**\n     * @dev Triggered when the contract has been initialized.\n     */\n    event WalletStorageInitialized();\n\n    error WalletStorageIsInitializing();\n    error WalletStorageIsNotInitializing();\n    error WalletStorageIsInitialized();\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyWalletStorageInitializing` functions can be used to initialize parent contracts.\n     *\n     * Functions marked with `walletStorageInitializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {WalletStorageInitialized} event.\n     */\n    modifier walletStorageInitializer() {\n        bool isTopLevelCall = _setWalletStorageInitializing();\n        _;\n        if (isTopLevelCall) {\n            WalletStorageV1Lib.getLayout().initializing = false;\n            emit WalletStorageInitialized();\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {walletStorageInitializer} modifier, directly or indirectly.\n     */\n    modifier onlyWalletStorageInitializing() {\n        if (!WalletStorageV1Lib.getLayout().initializing) {\n            revert WalletStorageIsNotInitializing();\n        }\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {WalletStorageInitialized} event the first time it is successfully executed.\n     */\n    function _disableWalletStorageInitializers() internal virtual {\n        if (WalletStorageV1Lib.getLayout().initializing) {\n            revert WalletStorageIsInitializing();\n        }\n        if (WalletStorageV1Lib.getLayout().initialized != type(uint8).max) {\n            WalletStorageV1Lib.getLayout().initialized = type(uint8).max;\n            emit WalletStorageInitialized();\n        }\n    }\n\n    function _setWalletStorageInitializing() internal returns (bool) {\n        bool isTopLevelCall = !WalletStorageV1Lib.getLayout().initializing;\n        uint8 initialized = WalletStorageV1Lib.getLayout().initialized;\n        if (!(isTopLevelCall && initialized < 1) || (address(this).code.length <= 0 && initialized == 1)) {\n            revert WalletStorageIsInitialized();\n        }\n        WalletStorageV1Lib.getLayout().initialized = 1;\n        if (isTopLevelCall) {\n            WalletStorageV1Lib.getLayout().initializing = true;\n        }\n        return isTopLevelCall;\n    }\n}\n"},"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/**\n * User Operation struct\n * @param sender                - The sender account of this request.\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\n * @param initCode              - If set, the account contract will be created by this constructor/\n * @param callData              - The method call to execute on this account.\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\n *                                Covers batch overhead.\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\n *                                The paymaster will pay for the transaction instead of the sender.\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n */\nstruct PackedUserOperation {\n    address sender;\n    uint256 nonce;\n    bytes initCode;\n    bytes callData;\n    bytes32 accountGasLimits;\n    uint256 preVerificationGas;\n    bytes32 gasFees;\n    bytes paymasterAndData;\n    bytes signature;\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/account-abstraction/contracts/interfaces/IStakeManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.5;\n\n/**\n * Manage deposits and stakes.\n * Deposit is just a balance used to pay for UserOperations (either by a paymaster or an account).\n * Stake is value locked for at least \"unstakeDelay\" by the staked entity.\n */\ninterface IStakeManager {\n    event Deposited(address indexed account, uint256 totalDeposit);\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    // Emitted when stake or unstake delay are modified.\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 unstakeDelaySec\n    );\n\n    // Emitted once a stake is scheduled for withdrawal.\n    event StakeUnlocked(address indexed account, uint256 withdrawTime);\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit         - The entity's deposit.\n     * @param staked          - True if this entity is staked.\n     * @param stake           - Actual amount of ether staked for this entity.\n     * @param unstakeDelaySec - Minimum delay to withdraw the stake.\n     * @param withdrawTime    - First block timestamp where 'withdrawStake' will be callable, or zero if already locked.\n     * @dev Sizes were chosen so that deposit fits into one cell (used during handleOp)\n     *      and the rest fit into a 2nd cell (used during stake/unstake)\n     *      - 112 bit allows for 10^15 eth\n     *      - 48 bit for full timestamp\n     *      - 32 bit allows 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint256 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint48 withdrawTime;\n    }\n\n    // API struct used by getStakeInfo and simulateValidation.\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /**\n     * Get deposit info.\n     * @param account - The account to query.\n     * @return info   - Full deposit information of given account.\n     */\n    function getDepositInfo(\n        address account\n    ) external view returns (DepositInfo memory info);\n\n    /**\n     * Get account balance.\n     * @param account - The account to query.\n     * @return        - The deposit (for gas payment) of the account.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * Add to the deposit of the given account.\n     * @param account - The account to add to.\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * Add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec - The new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * Attempt to unlock the stake.\n     * The value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * Withdraw from the (unlocked) stake.\n     * Must first call unlockStake and wait for the unstakeDelay to pass.\n     * @param withdrawAddress - The address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * Withdraw from the deposit.\n     * @param withdrawAddress - The address to send withdrawn value.\n     * @param withdrawAmount  - The amount to withdraw.\n     */\n    function withdrawTo(\n        address payable withdrawAddress,\n        uint256 withdrawAmount\n    ) external;\n}\n"},"lib/account-abstraction/contracts/interfaces/IAggregator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./PackedUserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n    /**\n     * Validate aggregated signature.\n     * Revert if the aggregated signature does not match the given list of operations.\n     * @param userOps   - Array of UserOperations to validate the signature for.\n     * @param signature - The aggregated signature.\n     */\n    function validateSignatures(\n        PackedUserOperation[] calldata userOps,\n        bytes calldata signature\n    ) external view;\n\n    /**\n     * Validate signature of a single userOp.\n     * This method should be called by bundler after EntryPointSimulation.simulateValidation() returns\n     * the aggregator this account uses.\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n     * @param userOp        - The userOperation received from the user.\n     * @return sigForUserOp - The value to put into the signature field of the userOp when calling handleOps.\n     *                        (usually empty, unless account and aggregator support some kind of \"multisig\".\n     */\n    function validateUserOpSignature(\n        PackedUserOperation calldata userOp\n    ) external view returns (bytes memory sigForUserOp);\n\n    /**\n     * Aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation.\n     * @param userOps              - Array of UserOperations to collect the signatures from.\n     * @return aggregatedSignature - The aggregated signature.\n     */\n    function aggregateSignatures(\n        PackedUserOperation[] calldata userOps\n    ) external view returns (bytes memory aggregatedSignature);\n}\n"},"lib/account-abstraction/contracts/interfaces/INonceManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\ninterface INonceManager {\n\n    /**\n     * Return the next nonce for this sender.\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n     * But UserOp with different keys can come with arbitrary order.\n     *\n     * @param sender the account address\n     * @param key the high 192 bit of the nonce\n     * @return nonce a full nonce to pass for next UserOp with this sender.\n     */\n    function getNonce(address sender, uint192 key)\n    external view returns (uint256 nonce);\n\n    /**\n     * Manually increment the nonce of the sender.\n     * This method is exposed just for completeness..\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\n     * as the EntryPoint will update the nonce regardless.\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n     * UserOperations will not pay extra for the first transaction with a given key.\n     */\n    function incrementNonce(uint192 key) external;\n}\n"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"},"lib/account-abstraction/contracts/interfaces/IPaymaster.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./PackedUserOperation.sol\";\n\n/**\n * The interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\n * A paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\n */\ninterface IPaymaster {\n    enum PostOpMode {\n        // User op succeeded.\n        opSucceeded,\n        // User op reverted. Still has to pay for gas.\n        opReverted,\n        // Only used internally in the EntryPoint (cleanup after postOp reverts). Never calling paymaster with this value\n        postOpReverted\n    }\n\n    /**\n     * Payment validation: check if paymaster agrees to pay.\n     * Must verify sender is the entryPoint.\n     * Revert to reject this request.\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted).\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\n     * @param userOp          - The user operation.\n     * @param userOpHash      - Hash of the user's request data.\n     * @param maxCost         - The maximum cost of this transaction (based on maximum gas and gas price from userOp).\n     * @return context        - Value to send to a postOp. Zero length to signify postOp is not required.\n     * @return validationData - Signature and time-range of this operation, encoded the same as the return\n     *                          value of validateUserOperation.\n     *                          <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *                                                    other values are invalid for paymaster.\n     *                          <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *                          <6-byte> validAfter - first timestamp this operation is valid\n     *                          Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validatePaymasterUserOp(\n        PackedUserOperation calldata userOp,\n        bytes32 userOpHash,\n        uint256 maxCost\n    ) external returns (bytes memory context, uint256 validationData);\n\n    /**\n     * Post-operation handler.\n     * Must verify sender is the entryPoint.\n     * @param mode          - Enum with the following options:\n     *                        opSucceeded - User operation succeeded.\n     *                        opReverted  - User op reverted. The paymaster still has to pay for gas.\n     *                        postOpReverted - never passed in a call to postOp().\n     * @param context       - The context value returned by validatePaymasterUserOp\n     * @param actualGasCost - Actual gas used so far (without this postOp call).\n     * @param actualUserOpFeePerGas - the gas price this UserOp pays. This value is based on the UserOp's maxFeePerGas\n     *                        and maxPriorityFee (and basefee)\n     *                        It is not the same as tx.gasprice, which is what the bundler pays.\n     */\n    function postOp(\n        PostOpMode mode,\n        bytes calldata context,\n        uint256 actualGasCost,\n        uint256 actualUserOpFeePerGas\n    ) external;\n}\n"},"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"}},"settings":{"remappings":["@account-abstraction/=lib/account-abstraction/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/","hardhat/=node_modules/hardhat/","@modular-account/=lib/modular-account/src/","@solady/=lib/solady/src/","@fcl/=lib/FreshCryptoLib/solidity/src/","@p256-verifier/=lib/p256-verifier/src/","@webauthn-sol/=lib/webauthn-sol/src/","@modular-account-libs/=lib/modular-account-libs/src/","FreshCryptoLib/=lib/FreshCryptoLib/solidity/src/","account-abstraction/=lib/account-abstraction/contracts/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","modular-account-libs/=lib/modular-account-libs/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","p256-verifier/=lib/p256-verifier/","solady/=lib/solady/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","viaIR":true,"libraries":{}}}
